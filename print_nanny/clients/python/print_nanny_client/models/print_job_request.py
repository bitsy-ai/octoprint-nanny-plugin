# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from print_nanny_client.exceptions import ApiValueError  # noqa: F401
from print_nanny_client.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class PrintJobRequest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
    }

    attribute_map = {
        'dt': 'dt',  # noqa: E501
        'printer_profile': 'printer_profile',  # noqa: E501
        'name': 'name',  # noqa: E501
        'gcode_file_hash': 'gcode_file_hash',  # noqa: E501
        'gcode_file': 'gcode_file',  # noqa: E501
        'last_status': 'last_status'  # noqa: E501
    }

    openapi_types = {
        'dt': 'datetime',
        'printer_profile': 'int',
        'name': 'str',
        'gcode_file_hash': 'str',
        'gcode_file': 'int',
        'last_status': 'LastStatusEnum'
    }

    validations = {
        ('name',): {
            'max_length': 255,
        },
        ('gcode_file_hash',): {
            'max_length': 255,
        },
    }

    def __init__(self, dt=None, printer_profile=None, name=None, gcode_file_hash=None, gcode_file=None, last_status=None):  # noqa: E501
        """PrintJobRequest - a model defined in OpenAPI"""  # noqa: E501

        self._dt = None
        self._printer_profile = None
        self._name = None
        self._gcode_file_hash = None
        self._gcode_file = None
        self._last_status = None
        self.discriminator = None

        self.dt = dt
        self.printer_profile = printer_profile
        self.name = name
        self.gcode_file_hash = gcode_file_hash
        self.gcode_file = gcode_file
        if last_status is not None:
            self.last_status = (
                last_status
            )

    @property
    def dt(self):
        """Gets the dt of this PrintJobRequest.  # noqa: E501


        :return: The dt of this PrintJobRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):  # noqa: E501
        """Sets the dt of this PrintJobRequest.


        :param dt: The dt of this PrintJobRequest.  # noqa: E501
        :type: datetime
        """
        if dt is None:
            raise ApiValueError("Invalid value for `dt`, must not be `None`")  # noqa: E501

        self._dt = (
            dt
        )

    @property
    def printer_profile(self):
        """Gets the printer_profile of this PrintJobRequest.  # noqa: E501


        :return: The printer_profile of this PrintJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._printer_profile

    @printer_profile.setter
    def printer_profile(self, printer_profile):  # noqa: E501
        """Sets the printer_profile of this PrintJobRequest.


        :param printer_profile: The printer_profile of this PrintJobRequest.  # noqa: E501
        :type: int
        """
        if printer_profile is None:
            raise ApiValueError("Invalid value for `printer_profile`, must not be `None`")  # noqa: E501

        self._printer_profile = (
            printer_profile
        )

    @property
    def name(self):
        """Gets the name of this PrintJobRequest.  # noqa: E501


        :return: The name of this PrintJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):  # noqa: E501
        """Sets the name of this PrintJobRequest.


        :param name: The name of this PrintJobRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ApiValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        check_validations(
            self.validations,
            ('name',),
            name
        )

        self._name = (
            name
        )

    @property
    def gcode_file_hash(self):
        """Gets the gcode_file_hash of this PrintJobRequest.  # noqa: E501


        :return: The gcode_file_hash of this PrintJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._gcode_file_hash

    @gcode_file_hash.setter
    def gcode_file_hash(self, gcode_file_hash):  # noqa: E501
        """Sets the gcode_file_hash of this PrintJobRequest.


        :param gcode_file_hash: The gcode_file_hash of this PrintJobRequest.  # noqa: E501
        :type: str
        """
        check_validations(
            self.validations,
            ('gcode_file_hash',),
            gcode_file_hash
        )

        self._gcode_file_hash = (
            gcode_file_hash
        )

    @property
    def gcode_file(self):
        """Gets the gcode_file of this PrintJobRequest.  # noqa: E501


        :return: The gcode_file of this PrintJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._gcode_file

    @gcode_file.setter
    def gcode_file(self, gcode_file):  # noqa: E501
        """Sets the gcode_file of this PrintJobRequest.


        :param gcode_file: The gcode_file of this PrintJobRequest.  # noqa: E501
        :type: int
        """

        self._gcode_file = (
            gcode_file
        )

    @property
    def last_status(self):
        """Gets the last_status of this PrintJobRequest.  # noqa: E501


        :return: The last_status of this PrintJobRequest.  # noqa: E501
        :rtype: LastStatusEnum
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):  # noqa: E501
        """Sets the last_status of this PrintJobRequest.


        :param last_status: The last_status of this PrintJobRequest.  # noqa: E501
        :type: LastStatusEnum
        """

        self._last_status = (
            last_status
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrintJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
