# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from print_nanny_client.exceptions import ApiValueError  # noqa: F401
from print_nanny_client.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class PredictEventFileRequest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
    }

    attribute_map = {
        'annotated_image': 'annotated_image',  # noqa: E501
        'hash': 'hash',  # noqa: E501
        'original_image': 'original_image'  # noqa: E501
    }

    openapi_types = {
        'annotated_image': 'file',
        'hash': 'str',
        'original_image': 'file'
    }

    validations = {
        ('hash',): {
            'max_length': 255,
        },
    }

    def __init__(self, annotated_image=None, hash=None, original_image=None):  # noqa: E501
        """PredictEventFileRequest - a model defined in OpenAPI"""  # noqa: E501

        self._annotated_image = None
        self._hash = None
        self._original_image = None
        self.discriminator = None

        self.annotated_image = annotated_image
        self.hash = hash
        self.original_image = original_image

    @property
    def annotated_image(self):
        """Gets the annotated_image of this PredictEventFileRequest.  # noqa: E501


        :return: The annotated_image of this PredictEventFileRequest.  # noqa: E501
        :rtype: file
        """
        return self._annotated_image

    @annotated_image.setter
    def annotated_image(self, annotated_image):  # noqa: E501
        """Sets the annotated_image of this PredictEventFileRequest.


        :param annotated_image: The annotated_image of this PredictEventFileRequest.  # noqa: E501
        :type: file
        """
        if annotated_image is None:
            raise ApiValueError("Invalid value for `annotated_image`, must not be `None`")  # noqa: E501

        self._annotated_image = (
            annotated_image
        )

    @property
    def hash(self):
        """Gets the hash of this PredictEventFileRequest.  # noqa: E501


        :return: The hash of this PredictEventFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):  # noqa: E501
        """Sets the hash of this PredictEventFileRequest.


        :param hash: The hash of this PredictEventFileRequest.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ApiValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501
        check_validations(
            self.validations,
            ('hash',),
            hash
        )

        self._hash = (
            hash
        )

    @property
    def original_image(self):
        """Gets the original_image of this PredictEventFileRequest.  # noqa: E501


        :return: The original_image of this PredictEventFileRequest.  # noqa: E501
        :rtype: file
        """
        return self._original_image

    @original_image.setter
    def original_image(self, original_image):  # noqa: E501
        """Sets the original_image of this PredictEventFileRequest.


        :param original_image: The original_image of this PredictEventFileRequest.  # noqa: E501
        :type: file
        """
        if original_image is None:
            raise ApiValueError("Invalid value for `original_image`, must not be `None`")  # noqa: E501

        self._original_image = (
            original_image
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictEventFileRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
