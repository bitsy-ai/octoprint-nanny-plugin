# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from print_nanny_client.configuration import Configuration


class OctoPrintEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'dt': 'datetime',
        'event_type': 'str',
        'event_data': 'dict(str, object)',
        'plugin_version': 'str',
        'octoprint_version': 'str',
        'user': 'int',
        'print_job': 'int'
    }

    attribute_map = {
        'id': 'id',
        'dt': 'dt',
        'event_type': 'event_type',
        'event_data': 'event_data',
        'plugin_version': 'plugin_version',
        'octoprint_version': 'octoprint_version',
        'user': 'user',
        'print_job': 'print_job'
    }

    def __init__(self, id=None, dt=None, event_type=None, event_data=None, plugin_version=None, octoprint_version=None, user=None, print_job=None, local_vars_configuration=None):  # noqa: E501
        """OctoPrintEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._dt = None
        self._event_type = None
        self._event_data = None
        self._plugin_version = None
        self._octoprint_version = None
        self._user = None
        self._print_job = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.dt = dt
        self.event_type = event_type
        self.event_data = event_data
        self.plugin_version = plugin_version
        self.octoprint_version = octoprint_version
        if user is not None:
            self.user = user
        self.print_job = print_job

    @property
    def id(self):
        """Gets the id of this OctoPrintEvent.  # noqa: E501


        :return: The id of this OctoPrintEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OctoPrintEvent.


        :param id: The id of this OctoPrintEvent.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def dt(self):
        """Gets the dt of this OctoPrintEvent.  # noqa: E501


        :return: The dt of this OctoPrintEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this OctoPrintEvent.


        :param dt: The dt of this OctoPrintEvent.  # noqa: E501
        :type dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and dt is None:  # noqa: E501
            raise ValueError("Invalid value for `dt`, must not be `None`")  # noqa: E501

        self._dt = dt

    @property
    def event_type(self):
        """Gets the event_type of this OctoPrintEvent.  # noqa: E501


        :return: The event_type of this OctoPrintEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this OctoPrintEvent.


        :param event_type: The event_type of this OctoPrintEvent.  # noqa: E501
        :type event_type: str
        """
        if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                event_type is not None and len(event_type) > 30):
            raise ValueError("Invalid value for `event_type`, length must be less than or equal to `30`")  # noqa: E501

        self._event_type = event_type

    @property
    def event_data(self):
        """Gets the event_data of this OctoPrintEvent.  # noqa: E501


        :return: The event_data of this OctoPrintEvent.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this OctoPrintEvent.


        :param event_data: The event_data of this OctoPrintEvent.  # noqa: E501
        :type event_data: dict(str, object)
        """
        if self.local_vars_configuration.client_side_validation and event_data is None:  # noqa: E501
            raise ValueError("Invalid value for `event_data`, must not be `None`")  # noqa: E501

        self._event_data = event_data

    @property
    def plugin_version(self):
        """Gets the plugin_version of this OctoPrintEvent.  # noqa: E501


        :return: The plugin_version of this OctoPrintEvent.  # noqa: E501
        :rtype: str
        """
        return self._plugin_version

    @plugin_version.setter
    def plugin_version(self, plugin_version):
        """Sets the plugin_version of this OctoPrintEvent.


        :param plugin_version: The plugin_version of this OctoPrintEvent.  # noqa: E501
        :type plugin_version: str
        """
        if self.local_vars_configuration.client_side_validation and plugin_version is None:  # noqa: E501
            raise ValueError("Invalid value for `plugin_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                plugin_version is not None and len(plugin_version) > 30):
            raise ValueError("Invalid value for `plugin_version`, length must be less than or equal to `30`")  # noqa: E501

        self._plugin_version = plugin_version

    @property
    def octoprint_version(self):
        """Gets the octoprint_version of this OctoPrintEvent.  # noqa: E501


        :return: The octoprint_version of this OctoPrintEvent.  # noqa: E501
        :rtype: str
        """
        return self._octoprint_version

    @octoprint_version.setter
    def octoprint_version(self, octoprint_version):
        """Sets the octoprint_version of this OctoPrintEvent.


        :param octoprint_version: The octoprint_version of this OctoPrintEvent.  # noqa: E501
        :type octoprint_version: str
        """
        if self.local_vars_configuration.client_side_validation and octoprint_version is None:  # noqa: E501
            raise ValueError("Invalid value for `octoprint_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                octoprint_version is not None and len(octoprint_version) > 30):
            raise ValueError("Invalid value for `octoprint_version`, length must be less than or equal to `30`")  # noqa: E501

        self._octoprint_version = octoprint_version

    @property
    def user(self):
        """Gets the user of this OctoPrintEvent.  # noqa: E501


        :return: The user of this OctoPrintEvent.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OctoPrintEvent.


        :param user: The user of this OctoPrintEvent.  # noqa: E501
        :type user: int
        """

        self._user = user

    @property
    def print_job(self):
        """Gets the print_job of this OctoPrintEvent.  # noqa: E501


        :return: The print_job of this OctoPrintEvent.  # noqa: E501
        :rtype: int
        """
        return self._print_job

    @print_job.setter
    def print_job(self, print_job):
        """Sets the print_job of this OctoPrintEvent.


        :param print_job: The print_job of this OctoPrintEvent.  # noqa: E501
        :type print_job: int
        """

        self._print_job = print_job

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OctoPrintEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OctoPrintEvent):
            return True

        return self.to_dict() != other.to_dict()
