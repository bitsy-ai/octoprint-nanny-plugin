# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from print_nanny_client.exceptions import ApiValueError  # noqa: F401
from print_nanny_client.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class GcodeFile(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
    }

    attribute_map = {
        'id': 'id',  # noqa: E501
        'user': 'user',  # noqa: E501
        'name': 'name',  # noqa: E501
        'file': 'file',  # noqa: E501
        'file_hash': 'file_hash',  # noqa: E501
        'url': 'url'  # noqa: E501
    }

    openapi_types = {
        'id': 'int',
        'user': 'int',
        'name': 'str',
        'file': 'str',
        'file_hash': 'str',
        'url': 'str'
    }

    validations = {
        ('name',): {
            'max_length': 255,
        },
        ('file_hash',): {
            'max_length': 255,
        },
    }

    def __init__(self, id=None, user=None, name=None, file=None, file_hash=None, url=None):  # noqa: E501
        """GcodeFile - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._user = None
        self._name = None
        self._file = None
        self._file_hash = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = (
                id
            )
        if user is not None:
            self.user = (
                user
            )
        self.name = name
        self.file = file
        self.file_hash = file_hash
        if url is not None:
            self.url = (
                url
            )

    @property
    def id(self):
        """Gets the id of this GcodeFile.  # noqa: E501


        :return: The id of this GcodeFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):  # noqa: E501
        """Sets the id of this GcodeFile.


        :param id: The id of this GcodeFile.  # noqa: E501
        :type: int
        """

        self._id = (
            id
        )

    @property
    def user(self):
        """Gets the user of this GcodeFile.  # noqa: E501


        :return: The user of this GcodeFile.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):  # noqa: E501
        """Sets the user of this GcodeFile.


        :param user: The user of this GcodeFile.  # noqa: E501
        :type: int
        """

        self._user = (
            user
        )

    @property
    def name(self):
        """Gets the name of this GcodeFile.  # noqa: E501


        :return: The name of this GcodeFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):  # noqa: E501
        """Sets the name of this GcodeFile.


        :param name: The name of this GcodeFile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ApiValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        check_validations(
            self.validations,
            ('name',),
            name
        )

        self._name = (
            name
        )

    @property
    def file(self):
        """Gets the file of this GcodeFile.  # noqa: E501


        :return: The file of this GcodeFile.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):  # noqa: E501
        """Sets the file of this GcodeFile.


        :param file: The file of this GcodeFile.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ApiValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = (
            file
        )

    @property
    def file_hash(self):
        """Gets the file_hash of this GcodeFile.  # noqa: E501


        :return: The file_hash of this GcodeFile.  # noqa: E501
        :rtype: str
        """
        return self._file_hash

    @file_hash.setter
    def file_hash(self, file_hash):  # noqa: E501
        """Sets the file_hash of this GcodeFile.


        :param file_hash: The file_hash of this GcodeFile.  # noqa: E501
        :type: str
        """
        if file_hash is None:
            raise ApiValueError("Invalid value for `file_hash`, must not be `None`")  # noqa: E501
        check_validations(
            self.validations,
            ('file_hash',),
            file_hash
        )

        self._file_hash = (
            file_hash
        )

    @property
    def url(self):
        """Gets the url of this GcodeFile.  # noqa: E501


        :return: The url of this GcodeFile.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):  # noqa: E501
        """Sets the url of this GcodeFile.


        :param url: The url of this GcodeFile.  # noqa: E501
        :type: str
        """

        self._url = (
            url
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GcodeFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
