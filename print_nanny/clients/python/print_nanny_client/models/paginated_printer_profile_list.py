# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from print_nanny_client.exceptions import ApiValueError  # noqa: F401
from print_nanny_client.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations
)


class PaginatedPrinterProfileList(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
    """

    allowed_values = {
    }

    attribute_map = {
        'count': 'count',  # noqa: E501
        'next': 'next',  # noqa: E501
        'previous': 'previous',  # noqa: E501
        'results': 'results'  # noqa: E501
    }

    openapi_types = {
        'count': 'int',
        'next': 'str',
        'previous': 'str',
        'results': 'list[PrinterProfile]'
    }

    validations = {
    }

    def __init__(self, count=None, next=None, previous=None, results=None):  # noqa: E501
        """PaginatedPrinterProfileList - a model defined in OpenAPI"""  # noqa: E501

        self._count = None
        self._next = None
        self._previous = None
        self._results = None
        self.discriminator = None

        if count is not None:
            self.count = (
                count
            )
        self.next = next
        self.previous = previous
        if results is not None:
            self.results = (
                results
            )

    @property
    def count(self):
        """Gets the count of this PaginatedPrinterProfileList.  # noqa: E501


        :return: The count of this PaginatedPrinterProfileList.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):  # noqa: E501
        """Sets the count of this PaginatedPrinterProfileList.


        :param count: The count of this PaginatedPrinterProfileList.  # noqa: E501
        :type: int
        """

        self._count = (
            count
        )

    @property
    def next(self):
        """Gets the next of this PaginatedPrinterProfileList.  # noqa: E501


        :return: The next of this PaginatedPrinterProfileList.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):  # noqa: E501
        """Sets the next of this PaginatedPrinterProfileList.


        :param next: The next of this PaginatedPrinterProfileList.  # noqa: E501
        :type: str
        """

        self._next = (
            next
        )

    @property
    def previous(self):
        """Gets the previous of this PaginatedPrinterProfileList.  # noqa: E501


        :return: The previous of this PaginatedPrinterProfileList.  # noqa: E501
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):  # noqa: E501
        """Sets the previous of this PaginatedPrinterProfileList.


        :param previous: The previous of this PaginatedPrinterProfileList.  # noqa: E501
        :type: str
        """

        self._previous = (
            previous
        )

    @property
    def results(self):
        """Gets the results of this PaginatedPrinterProfileList.  # noqa: E501


        :return: The results of this PaginatedPrinterProfileList.  # noqa: E501
        :rtype: list[PrinterProfile]
        """
        return self._results

    @results.setter
    def results(self, results):  # noqa: E501
        """Sets the results of this PaginatedPrinterProfileList.


        :param results: The results of this PaginatedPrinterProfileList.  # noqa: E501
        :type: list[PrinterProfile]
        """

        self._results = (
            results
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginatedPrinterProfileList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
