# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from print_nanny_client.api_client import ApiClient
from print_nanny_client.exceptions import (
    ApiTypeError,
    ApiValueError
)
from print_nanny_client.model_utils import (
    check_allowed_values,
    check_validations
)


class RemoteControlApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __gcode_files_create(self, name, file, file_hash, **kwargs):  # noqa: E501
            """gcode_files_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.gcode_files_create(name, file, file_hash, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param str name: (required)
            :param file file: (required)
            :param str file_hash: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: GcodeFile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['name'] = name
            kwargs['file'] = file
            kwargs['file_hash'] = file_hash
            return self.call_with_http_info(**kwargs)

        self.gcode_files_create = Endpoint(
            settings={
                'response_type': 'GcodeFile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/gcode-files/',
                'operation_id': 'gcode_files_create',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'name',
                    'file',
                    'file_hash',
                ],
                'required': [
                    'name',
                    'file',
                    'file_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                    'file_hash',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {
                        'max_length': 255,
                    },
                    ('file_hash',): {
                        'max_length': 255,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name': 'str',
                    'file': 'file',
                    'file_hash': 'str',
                },
                'attribute_map': {
                    'name': 'name',
                    'file': 'file',
                    'file_hash': 'file_hash',
                },
                'location_map': {
                    'name': 'form',
                    'file': 'form',
                    'file_hash': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__gcode_files_create
        )

        def __gcode_files_list(self, **kwargs):  # noqa: E501
            """gcode_files_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.gcode_files_list(async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int limit: Number of results to return per page.
            :param int offset: The initial index from which to return the results.
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PaginatedGcodeFileList
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            return self.call_with_http_info(**kwargs)

        self.gcode_files_list = Endpoint(
            settings={
                'response_type': 'PaginatedGcodeFileList',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/gcode-files/',
                'operation_id': 'gcode_files_list',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit': 'int',
                    'offset': 'int',
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__gcode_files_list
        )

        def __gcode_files_partial_update(self, id, **kwargs):  # noqa: E501
            """gcode_files_partial_update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.gcode_files_partial_update(id, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this gcode file. (required)
            :param str name:
            :param file file:
            :param str file_hash:
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: GcodeFile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            return self.call_with_http_info(**kwargs)

        self.gcode_files_partial_update = Endpoint(
            settings={
                'response_type': 'GcodeFile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/gcode-files/{id}/',
                'operation_id': 'gcode_files_partial_update',
                'http_method': 'PATCH',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'name',
                    'file',
                    'file_hash',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                    'file_hash',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {
                        'max_length': 255,
                    },
                    ('file_hash',): {
                        'max_length': 255,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                    'name': 'str',
                    'file': 'file',
                    'file_hash': 'str',
                },
                'attribute_map': {
                    'id': 'id',
                    'name': 'name',
                    'file': 'file',
                    'file_hash': 'file_hash',
                },
                'location_map': {
                    'id': 'path',
                    'name': 'form',
                    'file': 'form',
                    'file_hash': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__gcode_files_partial_update
        )

        def __gcode_files_retrieve(self, id, **kwargs):  # noqa: E501
            """gcode_files_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.gcode_files_retrieve(id, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this gcode file. (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: GcodeFile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            return self.call_with_http_info(**kwargs)

        self.gcode_files_retrieve = Endpoint(
            settings={
                'response_type': 'GcodeFile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/gcode-files/{id}/',
                'operation_id': 'gcode_files_retrieve',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__gcode_files_retrieve
        )

        def __gcode_files_update(self, id, name, file, file_hash, **kwargs):  # noqa: E501
            """gcode_files_update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.gcode_files_update(id, name, file, file_hash, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this gcode file. (required)
            :param str name: (required)
            :param file file: (required)
            :param str file_hash: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: GcodeFile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            kwargs['name'] = name
            kwargs['file'] = file
            kwargs['file_hash'] = file_hash
            return self.call_with_http_info(**kwargs)

        self.gcode_files_update = Endpoint(
            settings={
                'response_type': 'GcodeFile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/gcode-files/{id}/',
                'operation_id': 'gcode_files_update',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'name',
                    'file',
                    'file_hash',
                ],
                'required': [
                    'id',
                    'name',
                    'file',
                    'file_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                    'file_hash',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {
                        'max_length': 255,
                    },
                    ('file_hash',): {
                        'max_length': 255,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                    'name': 'str',
                    'file': 'file',
                    'file_hash': 'str',
                },
                'attribute_map': {
                    'id': 'id',
                    'name': 'name',
                    'file': 'file',
                    'file_hash': 'file_hash',
                },
                'location_map': {
                    'id': 'path',
                    'name': 'form',
                    'file': 'form',
                    'file_hash': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__gcode_files_update
        )

        def __gcode_files_update_or_create(self, name, file, file_hash, **kwargs):  # noqa: E501
            """gcode_files_update_or_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.gcode_files_update_or_create(name, file, file_hash, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param str name: (required)
            :param file file: (required)
            :param str file_hash: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: GcodeFile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['name'] = name
            kwargs['file'] = file
            kwargs['file_hash'] = file_hash
            return self.call_with_http_info(**kwargs)

        self.gcode_files_update_or_create = Endpoint(
            settings={
                'response_type': 'GcodeFile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/gcode-files/update_or_create/',
                'operation_id': 'gcode_files_update_or_create',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'name',
                    'file',
                    'file_hash',
                ],
                'required': [
                    'name',
                    'file',
                    'file_hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'name',
                    'file_hash',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {
                        'max_length': 255,
                    },
                    ('file_hash',): {
                        'max_length': 255,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name': 'str',
                    'file': 'file',
                    'file_hash': 'str',
                },
                'attribute_map': {
                    'name': 'name',
                    'file': 'file',
                    'file_hash': 'file_hash',
                },
                'location_map': {
                    'name': 'form',
                    'file': 'form',
                    'file_hash': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__gcode_files_update_or_create
        )

        def __print_jobs_create(self, print_job_request, **kwargs):  # noqa: E501
            """print_jobs_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.print_jobs_create(print_job_request, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param PrintJobRequest print_job_request: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrintJob
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['print_job_request'] = print_job_request
            return self.call_with_http_info(**kwargs)

        self.print_jobs_create = Endpoint(
            settings={
                'response_type': 'PrintJob',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/print-jobs/',
                'operation_id': 'print_jobs_create',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'print_job_request',
                ],
                'required': [
                    'print_job_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'print_job_request': 'PrintJobRequest',
                },
                'attribute_map': {
                },
                'location_map': {
                    'print_job_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__print_jobs_create
        )

        def __print_jobs_list(self, **kwargs):  # noqa: E501
            """print_jobs_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.print_jobs_list(async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int limit: Number of results to return per page.
            :param int offset: The initial index from which to return the results.
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PaginatedPrintJobList
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            return self.call_with_http_info(**kwargs)

        self.print_jobs_list = Endpoint(
            settings={
                'response_type': 'PaginatedPrintJobList',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/print-jobs/',
                'operation_id': 'print_jobs_list',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit': 'int',
                    'offset': 'int',
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__print_jobs_list
        )

        def __print_jobs_partial_update(self, id, **kwargs):  # noqa: E501
            """print_jobs_partial_update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.print_jobs_partial_update(id, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this print job. (required)
            :param PatchedPrintJobRequest patched_print_job_request:
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrintJob
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            return self.call_with_http_info(**kwargs)

        self.print_jobs_partial_update = Endpoint(
            settings={
                'response_type': 'PrintJob',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/print-jobs/{id}/',
                'operation_id': 'print_jobs_partial_update',
                'http_method': 'PATCH',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'patched_print_job_request',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                    'patched_print_job_request': 'PatchedPrintJobRequest',
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'patched_print_job_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__print_jobs_partial_update
        )

        def __print_jobs_retrieve(self, id, **kwargs):  # noqa: E501
            """print_jobs_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.print_jobs_retrieve(id, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this print job. (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrintJob
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            return self.call_with_http_info(**kwargs)

        self.print_jobs_retrieve = Endpoint(
            settings={
                'response_type': 'PrintJob',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/print-jobs/{id}/',
                'operation_id': 'print_jobs_retrieve',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__print_jobs_retrieve
        )

        def __print_jobs_update(self, id, print_job_request, **kwargs):  # noqa: E501
            """print_jobs_update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.print_jobs_update(id, print_job_request, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this print job. (required)
            :param PrintJobRequest print_job_request: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrintJob
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            kwargs['print_job_request'] = print_job_request
            return self.call_with_http_info(**kwargs)

        self.print_jobs_update = Endpoint(
            settings={
                'response_type': 'PrintJob',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/print-jobs/{id}/',
                'operation_id': 'print_jobs_update',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'print_job_request',
                ],
                'required': [
                    'id',
                    'print_job_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                    'print_job_request': 'PrintJobRequest',
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'print_job_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__print_jobs_update
        )

        def __printer_profiles_create(self, printer_profile_request, **kwargs):  # noqa: E501
            """printer_profiles_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.printer_profiles_create(printer_profile_request, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param PrinterProfileRequest printer_profile_request: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrinterProfile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['printer_profile_request'] = printer_profile_request
            return self.call_with_http_info(**kwargs)

        self.printer_profiles_create = Endpoint(
            settings={
                'response_type': 'PrinterProfile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/printer-profiles/',
                'operation_id': 'printer_profiles_create',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'printer_profile_request',
                ],
                'required': [
                    'printer_profile_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'printer_profile_request': 'PrinterProfileRequest',
                },
                'attribute_map': {
                },
                'location_map': {
                    'printer_profile_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__printer_profiles_create
        )

        def __printer_profiles_list(self, **kwargs):  # noqa: E501
            """printer_profiles_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.printer_profiles_list(async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int limit: Number of results to return per page.
            :param str name: name
            :param int offset: The initial index from which to return the results.
            :param str user: user
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PaginatedPrinterProfileList
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            return self.call_with_http_info(**kwargs)

        self.printer_profiles_list = Endpoint(
            settings={
                'response_type': 'PaginatedPrinterProfileList',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/printer-profiles/',
                'operation_id': 'printer_profiles_list',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'limit',
                    'name',
                    'offset',
                    'user',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit': 'int',
                    'name': 'str',
                    'offset': 'int',
                    'user': 'str',
                },
                'attribute_map': {
                    'limit': 'limit',
                    'name': 'name',
                    'offset': 'offset',
                    'user': 'user',
                },
                'location_map': {
                    'limit': 'query',
                    'name': 'query',
                    'offset': 'query',
                    'user': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__printer_profiles_list
        )

        def __printer_profiles_partial_update(self, id, **kwargs):  # noqa: E501
            """printer_profiles_partial_update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.printer_profiles_partial_update(id, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this printer profile. (required)
            :param PatchedPrinterProfileRequest patched_printer_profile_request:
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrinterProfile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            return self.call_with_http_info(**kwargs)

        self.printer_profiles_partial_update = Endpoint(
            settings={
                'response_type': 'PrinterProfile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/printer-profiles/{id}/',
                'operation_id': 'printer_profiles_partial_update',
                'http_method': 'PATCH',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'patched_printer_profile_request',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                    'patched_printer_profile_request': 'PatchedPrinterProfileRequest',
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'patched_printer_profile_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__printer_profiles_partial_update
        )

        def __printer_profiles_retrieve(self, id, **kwargs):  # noqa: E501
            """printer_profiles_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.printer_profiles_retrieve(id, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this printer profile. (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrinterProfile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            return self.call_with_http_info(**kwargs)

        self.printer_profiles_retrieve = Endpoint(
            settings={
                'response_type': 'PrinterProfile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/printer-profiles/{id}/',
                'operation_id': 'printer_profiles_retrieve',
                'http_method': 'GET',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__printer_profiles_retrieve
        )

        def __printer_profiles_update(self, id, printer_profile_request, **kwargs):  # noqa: E501
            """printer_profiles_update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.printer_profiles_update(id, printer_profile_request, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param int id: A unique integer value identifying this printer profile. (required)
            :param PrinterProfileRequest printer_profile_request: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrinterProfile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['id'] = id
            kwargs['printer_profile_request'] = printer_profile_request
            return self.call_with_http_info(**kwargs)

        self.printer_profiles_update = Endpoint(
            settings={
                'response_type': 'PrinterProfile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/printer-profiles/{id}/',
                'operation_id': 'printer_profiles_update',
                'http_method': 'PUT',
                'servers': [],
            },
            params_map={
                'all': [
                    'id',
                    'printer_profile_request',
                ],
                'required': [
                    'id',
                    'printer_profile_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id': 'int',
                    'printer_profile_request': 'PrinterProfileRequest',
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'printer_profile_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__printer_profiles_update
        )

        def __printer_profiles_update_or_create(self, printer_profile_request, **kwargs):  # noqa: E501
            """printer_profiles_update_or_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True
            >>> thread = api.printer_profiles_update_or_create(printer_profile_request, async_req=True)
            >>> result = thread.get()

            :param async_req bool: execute request asynchronously
            :param PrinterProfileRequest printer_profile_request: (required)
            :param _return_http_data_only: response data without head status
                code and headers
            :param _preload_content: if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            :param _request_timeout: timeout setting for this request. If one
                number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
            :return: PrinterProfile
                If the method is called asynchronously, returns the request
                thread.
            """
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['printer_profile_request'] = printer_profile_request
            return self.call_with_http_info(**kwargs)

        self.printer_profiles_update_or_create = Endpoint(
            settings={
                'response_type': 'PrinterProfile',
                'auth': [
                    'cookieAuth', 
                    'tokenAuth'
                ],
                'endpoint_path': '/api/printer-profiles/update_or_create/',
                'operation_id': 'printer_profiles_update_or_create',
                'http_method': 'POST',
                'servers': [],
            },
            params_map={
                'all': [
                    'printer_profile_request',
                ],
                'required': [
                    'printer_profile_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'printer_profile_request': 'PrinterProfileRequest',
                },
                'attribute_map': {
                },
                'location_map': {
                    'printer_profile_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__printer_profiles_update_or_create
        )


class Endpoint(object):
    def __init__(self, settings=None, params_map=None, root_map=None,
                 headers_map=None, api_client=None, callable=None):
        """Creates an endpoint

        Args:
            settings (dict): see below key value pairs
                'response_type' (str): response type
                'auth' (list): a list of auth type keys
                'endpoint_path' (str): the endpoint path
                'operation_id' (str): endpoint string identifier
                'http_method' (str): POST/PUT/PATCH/GET etc
                'servers' (list): list of str servers that this endpoint is at
            params_map (dict): see below key value pairs
                'all' (list): list of str endpoint parameter names
                'required' (list): list of required parameter names
                'nullable' (list): list of nullable parameter names
                'enum' (list): list of parameters with enum values
                'validation' (list): list of parameters with validations
            root_map
                'validations' (dict): the dict mapping endpoint parameter tuple
                    paths to their validation dictionaries
                'allowed_values' (dict): the dict mapping endpoint parameter
                    tuple paths to their allowed_values (enum) dictionaries
                'openapi_types' (dict): param_name to openapi type
                'attribute_map' (dict): param_name to camelCase name
                'location_map' (dict): param_name to  'body', 'file', 'form',
                    'header', 'path', 'query'
                collection_format_map (dict): param_name to `csv` etc.
            headers_map (dict): see below key value pairs
                'accept' (list): list of Accept header strings
                'content_type' (list): list of Content-Type header strings
            api_client (ApiClient) api client instance
            callable (function): the function which is invoked when the
                Endpoint is called
        """
        self.settings = settings
        self.params_map = params_map
        self.params_map['all'].extend([
            'async_req',
            '_host_index',
            '_preload_content',
            '_request_timeout',
            '_return_http_data_only'
        ])
        self.validations = root_map['validations']
        self.allowed_values = root_map['allowed_values']
        self.openapi_types = root_map['openapi_types']
        self.attribute_map = root_map['attribute_map']
        self.location_map = root_map['location_map']
        self.collection_format_map = root_map['collection_format_map']
        self.headers_map = headers_map
        self.api_client = api_client
        self.callable = callable

    def __validate_inputs(self, kwargs):
        for param in self.params_map['enum']:
            if param in kwargs:
                check_allowed_values(
                    self.allowed_values,
                    (param,),
                    kwargs[param],
                    self.validations
                )

        for param in self.params_map['validation']:
            if param in kwargs:
                check_validations(
                    self.validations,
                    (param,),
                    kwargs[param]
                )

    def __gather_params(self, kwargs):
        params = {
            'body': None,
            'collection_format': {},
            'file': {},
            'form': [],
            'header': {},
            'path': {},
            'query': []
        }

        for param_name, param_value in six.iteritems(kwargs):
            param_location = self.location_map.get(param_name)
            if param_location:
                if param_location == 'body':
                    params['body'] = param_value
                    continue
                base_name = self.attribute_map[param_name]
                if (param_location == 'form' and
                        self.openapi_types[param_name] == 'file'):
                    param_location = 'file'
                elif param_location in {'form', 'query'}:
                    param_value_full = (base_name, param_value)
                    params[param_location].append(param_value_full)
                if param_location not in {'form', 'query'}:
                    params[param_location][base_name] = param_value
                collection_format = self.collection_format_map.get(param_name)
                if collection_format:
                    params['collection_format'][base_name] = collection_format

        return params

    def __call__(self, *args, **kwargs):
        """ This method is invoked when endpoints are called
        Example:
        pet_api = PetApi()
        pet_api.add_pet  # this is an instance of the class Endpoint
        pet_api.add_pet()  # this invokes pet_api.add_pet.__call__()
        which then invokes the callable functions stored in that endpoint at
        pet_api.add_pet.callable or self.callable in this class
        """
        return self.callable(self, *args, **kwargs)

    def call_with_http_info(self, **kwargs):

        if kwargs.get('_host_index') and self.settings['servers']:
            _host_index = kwargs.get('_host_index')
            try:
                _host = self.settings['servers'][_host_index]
            except IndexError:
                raise ApiValueError(
                    "Invalid host index. Must be 0 <= index < %s" %
                    len(self.settings['servers'])
                )
        else:
            try:
                _host = self.settings['servers'][0]
            except IndexError:
                _host = None

        for key, value in six.iteritems(kwargs):
            if key not in self.params_map['all']:
                raise ApiTypeError(
                    "Got an unexpected parameter '%s'"
                    " to method `%s`" %
                    (key, self.settings['operation_id'])
                )
            if key not in self.params_map['nullable'] and value is None:
                raise ApiValueError(
                    "Value may not be None for non-nullable parameter `%s`"
                    " when calling `%s`" %
                    (key, self.settings['operation_id'])
                )

        for key in self.params_map['required']:
            if key not in kwargs.keys():
                raise ApiValueError(
                    "Missing the required parameter `%s` when calling "
                    "`%s`" % (key, self.settings['operation_id'])
                )

        self.__validate_inputs(kwargs)

        params = self.__gather_params(kwargs)

        accept_headers_list = self.headers_map['accept']
        if accept_headers_list:
            params['header']['Accept'] = self.api_client.select_header_accept(
                accept_headers_list)

        content_type_headers_list = self.headers_map['content_type']
        if content_type_headers_list:
            header_list = self.api_client.select_header_content_type(
                content_type_headers_list)
            params['header']['Content-Type'] = header_list

        return self.api_client.call_api(
            self.settings['endpoint_path'], self.settings['http_method'],
            params['path'],
            params['query'],
            params['header'],
            body=params['body'],
            post_params=params['form'],
            files=params['file'],
            response_type=self.settings['response_type'],
            auth_settings=self.settings['auth'],
            async_req=kwargs.get('async_req'),
            _return_http_data_only=kwargs.get('_return_http_data_only'),
            _preload_content=kwargs.get('_preload_content', True),
            _request_timeout=kwargs.get('_request_timeout'),
            _host=_host,
            collection_formats=params['collection_format'])
