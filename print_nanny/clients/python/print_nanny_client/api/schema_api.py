# coding: utf-8

"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from print_nanny_client.api_client import ApiClient, Endpoint
from print_nanny_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class SchemaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __schema_retrieve(
            self,
            **kwargs
        ):
            """schema_retrieve  # noqa: E501

            OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.schema_retrieve(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                lang (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.schema_retrieve = Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'cookieAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/schema/',
                'operation_id': 'schema_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'lang',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'lang',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('lang',): {

                        "AF": "af",
                        "AR": "ar",
                        "AR-DZ": "ar-dz",
                        "AST": "ast",
                        "AZ": "az",
                        "BE": "be",
                        "BG": "bg",
                        "BN": "bn",
                        "BR": "br",
                        "BS": "bs",
                        "CA": "ca",
                        "CS": "cs",
                        "CY": "cy",
                        "DA": "da",
                        "DE": "de",
                        "DSB": "dsb",
                        "EL": "el",
                        "EN": "en",
                        "EN-AU": "en-au",
                        "EN-GB": "en-gb",
                        "EO": "eo",
                        "ES": "es",
                        "ES-AR": "es-ar",
                        "ES-CO": "es-co",
                        "ES-MX": "es-mx",
                        "ES-NI": "es-ni",
                        "ES-VE": "es-ve",
                        "ET": "et",
                        "EU": "eu",
                        "FA": "fa",
                        "FI": "fi",
                        "FR": "fr",
                        "FY": "fy",
                        "GA": "ga",
                        "GD": "gd",
                        "GL": "gl",
                        "HE": "he",
                        "HI": "hi",
                        "HR": "hr",
                        "HSB": "hsb",
                        "HU": "hu",
                        "HY": "hy",
                        "IA": "ia",
                        "ID": "id",
                        "IG": "ig",
                        "IO": "io",
                        "IS": "is",
                        "IT": "it",
                        "JA": "ja",
                        "KA": "ka",
                        "KAB": "kab",
                        "KK": "kk",
                        "KM": "km",
                        "KN": "kn",
                        "KO": "ko",
                        "KY": "ky",
                        "LB": "lb",
                        "LT": "lt",
                        "LV": "lv",
                        "MK": "mk",
                        "ML": "ml",
                        "MN": "mn",
                        "MR": "mr",
                        "MY": "my",
                        "NB": "nb",
                        "NE": "ne",
                        "NL": "nl",
                        "NN": "nn",
                        "OS": "os",
                        "PA": "pa",
                        "PL": "pl",
                        "PT": "pt",
                        "PT-BR": "pt-br",
                        "RO": "ro",
                        "RU": "ru",
                        "SK": "sk",
                        "SL": "sl",
                        "SQ": "sq",
                        "SR": "sr",
                        "SR-LATN": "sr-latn",
                        "SV": "sv",
                        "SW": "sw",
                        "TA": "ta",
                        "TE": "te",
                        "TG": "tg",
                        "TH": "th",
                        "TK": "tk",
                        "TR": "tr",
                        "TT": "tt",
                        "UDM": "udm",
                        "UK": "uk",
                        "UR": "ur",
                        "UZ": "uz",
                        "VI": "vi",
                        "ZH-HANS": "zh-hans",
                        "ZH-HANT": "zh-hant"
                    },
                },
                'openapi_types': {
                    'lang':
                        (str,),
                },
                'attribute_map': {
                    'lang': 'lang',
                },
                'location_map': {
                    'lang': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.oai.openapi+json',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__schema_retrieve
        )
