# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def events_octoprint_create(self, body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs):  # noqa: E501
        """events_octoprint_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_create(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OctoPrintEventRequest body: (required)
        :param datetime dt2: (required)
        :param str event_type2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param datetime dt: (required)
        :param str event_type: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :return: OctoPrintEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs)  # noqa: E501
        else:
            (data) = self.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs)  # noqa: E501
            return data

    def events_octoprint_create_with_http_info(self, body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs):  # noqa: E501
        """events_octoprint_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OctoPrintEventRequest body: (required)
        :param datetime dt2: (required)
        :param str event_type2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param datetime dt: (required)
        :param str event_type: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :return: OctoPrintEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'event_type2', 'event_data2', 'plugin_version2', 'octoprint_version2', 'dt', 'event_type', 'event_data', 'plugin_version', 'octoprint_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_octoprint_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_type2' is set
        if ('event_type2' not in params or
                params['event_type2'] is None):
            raise ValueError("Missing the required parameter `event_type2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_data2' is set
        if ('event_data2' not in params or
                params['event_data2'] is None):
            raise ValueError("Missing the required parameter `event_data2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'plugin_version2' is set
        if ('plugin_version2' not in params or
                params['plugin_version2'] is None):
            raise ValueError("Missing the required parameter `plugin_version2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version2' is set
        if ('octoprint_version2' not in params or
                params['octoprint_version2'] is None):
            raise ValueError("Missing the required parameter `octoprint_version2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_data' is set
        if ('event_data' not in params or
                params['event_data'] is None):
            raise ValueError("Missing the required parameter `event_data` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'plugin_version' is set
        if ('plugin_version' not in params or
                params['plugin_version'] is None):
            raise ValueError("Missing the required parameter `plugin_version` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version' is set
        if ('octoprint_version' not in params or
                params['octoprint_version'] is None):
            raise ValueError("Missing the required parameter `octoprint_version` when calling `events_octoprint_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'event_type' in params:
            form_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'event_type' in params:
            form_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/octoprint/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OctoPrintEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_octoprint_create(self, body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs):  # noqa: E501
        """events_octoprint_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_create(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OctoPrintEventRequest body: (required)
        :param datetime dt2: (required)
        :param str event_type2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param datetime dt: (required)
        :param str event_type: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :return: OctoPrintEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs)  # noqa: E501
        else:
            (data) = self.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs)  # noqa: E501
            return data

    def events_octoprint_create_with_http_info(self, body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs):  # noqa: E501
        """events_octoprint_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OctoPrintEventRequest body: (required)
        :param datetime dt2: (required)
        :param str event_type2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param datetime dt: (required)
        :param str event_type: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :return: OctoPrintEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'event_type2', 'event_data2', 'plugin_version2', 'octoprint_version2', 'dt', 'event_type', 'event_data', 'plugin_version', 'octoprint_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_octoprint_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_type2' is set
        if ('event_type2' not in params or
                params['event_type2'] is None):
            raise ValueError("Missing the required parameter `event_type2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_data2' is set
        if ('event_data2' not in params or
                params['event_data2'] is None):
            raise ValueError("Missing the required parameter `event_data2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'plugin_version2' is set
        if ('plugin_version2' not in params or
                params['plugin_version2'] is None):
            raise ValueError("Missing the required parameter `plugin_version2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version2' is set
        if ('octoprint_version2' not in params or
                params['octoprint_version2'] is None):
            raise ValueError("Missing the required parameter `octoprint_version2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_data' is set
        if ('event_data' not in params or
                params['event_data'] is None):
            raise ValueError("Missing the required parameter `event_data` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'plugin_version' is set
        if ('plugin_version' not in params or
                params['plugin_version'] is None):
            raise ValueError("Missing the required parameter `plugin_version` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version' is set
        if ('octoprint_version' not in params or
                params['octoprint_version'] is None):
            raise ValueError("Missing the required parameter `octoprint_version` when calling `events_octoprint_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'event_type' in params:
            form_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'event_type' in params:
            form_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/octoprint/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OctoPrintEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_octoprint_create(self, body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs):  # noqa: E501
        """events_octoprint_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_create(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OctoPrintEventRequest body: (required)
        :param datetime dt2: (required)
        :param str event_type2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param datetime dt: (required)
        :param str event_type: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :return: OctoPrintEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs)  # noqa: E501
        else:
            (data) = self.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs)  # noqa: E501
            return data

    def events_octoprint_create_with_http_info(self, body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, **kwargs):  # noqa: E501
        """events_octoprint_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_create_with_http_info(body, dt2, event_type2, event_data2, plugin_version2, octoprint_version2, dt, event_type, event_data, plugin_version, octoprint_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OctoPrintEventRequest body: (required)
        :param datetime dt2: (required)
        :param str event_type2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param datetime dt: (required)
        :param str event_type: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :return: OctoPrintEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'event_type2', 'event_data2', 'plugin_version2', 'octoprint_version2', 'dt', 'event_type', 'event_data', 'plugin_version', 'octoprint_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_octoprint_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_type2' is set
        if ('event_type2' not in params or
                params['event_type2'] is None):
            raise ValueError("Missing the required parameter `event_type2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_data2' is set
        if ('event_data2' not in params or
                params['event_data2'] is None):
            raise ValueError("Missing the required parameter `event_data2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'plugin_version2' is set
        if ('plugin_version2' not in params or
                params['plugin_version2'] is None):
            raise ValueError("Missing the required parameter `plugin_version2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version2' is set
        if ('octoprint_version2' not in params or
                params['octoprint_version2'] is None):
            raise ValueError("Missing the required parameter `octoprint_version2` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'event_data' is set
        if ('event_data' not in params or
                params['event_data'] is None):
            raise ValueError("Missing the required parameter `event_data` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'plugin_version' is set
        if ('plugin_version' not in params or
                params['plugin_version'] is None):
            raise ValueError("Missing the required parameter `plugin_version` when calling `events_octoprint_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version' is set
        if ('octoprint_version' not in params or
                params['octoprint_version'] is None):
            raise ValueError("Missing the required parameter `octoprint_version` when calling `events_octoprint_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'event_type' in params:
            form_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'event_type' in params:
            form_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/octoprint/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OctoPrintEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_octoprint_list(self, **kwargs):  # noqa: E501
        """events_octoprint_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedOctoPrintEventList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_octoprint_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.events_octoprint_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def events_octoprint_list_with_http_info(self, **kwargs):  # noqa: E501
        """events_octoprint_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_octoprint_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedOctoPrintEventList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_octoprint_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/octoprint/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedOctoPrintEventList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_predict_create(self, body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs):  # noqa: E501
        """events_predict_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_create(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PredictEventRequest body: (required)
        :param datetime dt2: (required)
        :param str original_image2: (required)
        :param str annotated_image2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param int print_job2: (required)
        :param datetime dt: (required)
        :param str original_image: (required)
        :param str annotated_image: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :param int print_job: (required)
        :return: PredictEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs)  # noqa: E501
        else:
            (data) = self.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs)  # noqa: E501
            return data

    def events_predict_create_with_http_info(self, body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs):  # noqa: E501
        """events_predict_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PredictEventRequest body: (required)
        :param datetime dt2: (required)
        :param str original_image2: (required)
        :param str annotated_image2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param int print_job2: (required)
        :param datetime dt: (required)
        :param str original_image: (required)
        :param str annotated_image: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :param int print_job: (required)
        :return: PredictEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'original_image2', 'annotated_image2', 'event_data2', 'plugin_version2', 'octoprint_version2', 'print_job2', 'dt', 'original_image', 'annotated_image', 'event_data', 'plugin_version', 'octoprint_version', 'print_job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_predict_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'original_image2' is set
        if ('original_image2' not in params or
                params['original_image2'] is None):
            raise ValueError("Missing the required parameter `original_image2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'annotated_image2' is set
        if ('annotated_image2' not in params or
                params['annotated_image2'] is None):
            raise ValueError("Missing the required parameter `annotated_image2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'event_data2' is set
        if ('event_data2' not in params or
                params['event_data2'] is None):
            raise ValueError("Missing the required parameter `event_data2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'plugin_version2' is set
        if ('plugin_version2' not in params or
                params['plugin_version2'] is None):
            raise ValueError("Missing the required parameter `plugin_version2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version2' is set
        if ('octoprint_version2' not in params or
                params['octoprint_version2'] is None):
            raise ValueError("Missing the required parameter `octoprint_version2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'print_job2' is set
        if ('print_job2' not in params or
                params['print_job2'] is None):
            raise ValueError("Missing the required parameter `print_job2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'original_image' is set
        if ('original_image' not in params or
                params['original_image'] is None):
            raise ValueError("Missing the required parameter `original_image` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'annotated_image' is set
        if ('annotated_image' not in params or
                params['annotated_image'] is None):
            raise ValueError("Missing the required parameter `annotated_image` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'event_data' is set
        if ('event_data' not in params or
                params['event_data'] is None):
            raise ValueError("Missing the required parameter `event_data` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'plugin_version' is set
        if ('plugin_version' not in params or
                params['plugin_version'] is None):
            raise ValueError("Missing the required parameter `plugin_version` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version' is set
        if ('octoprint_version' not in params or
                params['octoprint_version'] is None):
            raise ValueError("Missing the required parameter `octoprint_version` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'print_job' is set
        if ('print_job' not in params or
                params['print_job'] is None):
            raise ValueError("Missing the required parameter `print_job` when calling `events_predict_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'original_image' in params:
            local_var_files['original_image'] = params['original_image']  # noqa: E501
        if 'annotated_image' in params:
            local_var_files['annotated_image'] = params['annotated_image']  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'print_job' in params:
            form_params.append(('print_job', params['print_job']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'original_image' in params:
            local_var_files['original_image'] = params['original_image']  # noqa: E501
        if 'annotated_image' in params:
            local_var_files['annotated_image'] = params['annotated_image']  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'print_job' in params:
            form_params.append(('print_job', params['print_job']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/predict/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PredictEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_predict_create(self, body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs):  # noqa: E501
        """events_predict_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_create(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PredictEventRequest body: (required)
        :param datetime dt2: (required)
        :param str original_image2: (required)
        :param str annotated_image2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param int print_job2: (required)
        :param datetime dt: (required)
        :param str original_image: (required)
        :param str annotated_image: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :param int print_job: (required)
        :return: PredictEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs)  # noqa: E501
        else:
            (data) = self.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs)  # noqa: E501
            return data

    def events_predict_create_with_http_info(self, body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs):  # noqa: E501
        """events_predict_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PredictEventRequest body: (required)
        :param datetime dt2: (required)
        :param str original_image2: (required)
        :param str annotated_image2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param int print_job2: (required)
        :param datetime dt: (required)
        :param str original_image: (required)
        :param str annotated_image: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :param int print_job: (required)
        :return: PredictEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'original_image2', 'annotated_image2', 'event_data2', 'plugin_version2', 'octoprint_version2', 'print_job2', 'dt', 'original_image', 'annotated_image', 'event_data', 'plugin_version', 'octoprint_version', 'print_job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_predict_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'original_image2' is set
        if ('original_image2' not in params or
                params['original_image2'] is None):
            raise ValueError("Missing the required parameter `original_image2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'annotated_image2' is set
        if ('annotated_image2' not in params or
                params['annotated_image2'] is None):
            raise ValueError("Missing the required parameter `annotated_image2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'event_data2' is set
        if ('event_data2' not in params or
                params['event_data2'] is None):
            raise ValueError("Missing the required parameter `event_data2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'plugin_version2' is set
        if ('plugin_version2' not in params or
                params['plugin_version2'] is None):
            raise ValueError("Missing the required parameter `plugin_version2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version2' is set
        if ('octoprint_version2' not in params or
                params['octoprint_version2'] is None):
            raise ValueError("Missing the required parameter `octoprint_version2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'print_job2' is set
        if ('print_job2' not in params or
                params['print_job2'] is None):
            raise ValueError("Missing the required parameter `print_job2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'original_image' is set
        if ('original_image' not in params or
                params['original_image'] is None):
            raise ValueError("Missing the required parameter `original_image` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'annotated_image' is set
        if ('annotated_image' not in params or
                params['annotated_image'] is None):
            raise ValueError("Missing the required parameter `annotated_image` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'event_data' is set
        if ('event_data' not in params or
                params['event_data'] is None):
            raise ValueError("Missing the required parameter `event_data` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'plugin_version' is set
        if ('plugin_version' not in params or
                params['plugin_version'] is None):
            raise ValueError("Missing the required parameter `plugin_version` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version' is set
        if ('octoprint_version' not in params or
                params['octoprint_version'] is None):
            raise ValueError("Missing the required parameter `octoprint_version` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'print_job' is set
        if ('print_job' not in params or
                params['print_job'] is None):
            raise ValueError("Missing the required parameter `print_job` when calling `events_predict_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'original_image' in params:
            local_var_files['original_image'] = params['original_image']  # noqa: E501
        if 'annotated_image' in params:
            local_var_files['annotated_image'] = params['annotated_image']  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'print_job' in params:
            form_params.append(('print_job', params['print_job']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'original_image' in params:
            local_var_files['original_image'] = params['original_image']  # noqa: E501
        if 'annotated_image' in params:
            local_var_files['annotated_image'] = params['annotated_image']  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'print_job' in params:
            form_params.append(('print_job', params['print_job']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/predict/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PredictEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_predict_create(self, body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs):  # noqa: E501
        """events_predict_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_create(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PredictEventRequest body: (required)
        :param datetime dt2: (required)
        :param str original_image2: (required)
        :param str annotated_image2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param int print_job2: (required)
        :param datetime dt: (required)
        :param str original_image: (required)
        :param str annotated_image: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :param int print_job: (required)
        :return: PredictEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs)  # noqa: E501
        else:
            (data) = self.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs)  # noqa: E501
            return data

    def events_predict_create_with_http_info(self, body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, **kwargs):  # noqa: E501
        """events_predict_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_create_with_http_info(body, dt2, original_image2, annotated_image2, event_data2, plugin_version2, octoprint_version2, print_job2, dt, original_image, annotated_image, event_data, plugin_version, octoprint_version, print_job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PredictEventRequest body: (required)
        :param datetime dt2: (required)
        :param str original_image2: (required)
        :param str annotated_image2: (required)
        :param dict(str, Object) event_data2: (required)
        :param str plugin_version2: (required)
        :param str octoprint_version2: (required)
        :param int print_job2: (required)
        :param datetime dt: (required)
        :param str original_image: (required)
        :param str annotated_image: (required)
        :param dict(str, Object) event_data: (required)
        :param str plugin_version: (required)
        :param str octoprint_version: (required)
        :param int print_job: (required)
        :return: PredictEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'original_image2', 'annotated_image2', 'event_data2', 'plugin_version2', 'octoprint_version2', 'print_job2', 'dt', 'original_image', 'annotated_image', 'event_data', 'plugin_version', 'octoprint_version', 'print_job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_predict_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'original_image2' is set
        if ('original_image2' not in params or
                params['original_image2'] is None):
            raise ValueError("Missing the required parameter `original_image2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'annotated_image2' is set
        if ('annotated_image2' not in params or
                params['annotated_image2'] is None):
            raise ValueError("Missing the required parameter `annotated_image2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'event_data2' is set
        if ('event_data2' not in params or
                params['event_data2'] is None):
            raise ValueError("Missing the required parameter `event_data2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'plugin_version2' is set
        if ('plugin_version2' not in params or
                params['plugin_version2'] is None):
            raise ValueError("Missing the required parameter `plugin_version2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version2' is set
        if ('octoprint_version2' not in params or
                params['octoprint_version2'] is None):
            raise ValueError("Missing the required parameter `octoprint_version2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'print_job2' is set
        if ('print_job2' not in params or
                params['print_job2'] is None):
            raise ValueError("Missing the required parameter `print_job2` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'original_image' is set
        if ('original_image' not in params or
                params['original_image'] is None):
            raise ValueError("Missing the required parameter `original_image` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'annotated_image' is set
        if ('annotated_image' not in params or
                params['annotated_image'] is None):
            raise ValueError("Missing the required parameter `annotated_image` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'event_data' is set
        if ('event_data' not in params or
                params['event_data'] is None):
            raise ValueError("Missing the required parameter `event_data` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'plugin_version' is set
        if ('plugin_version' not in params or
                params['plugin_version'] is None):
            raise ValueError("Missing the required parameter `plugin_version` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'octoprint_version' is set
        if ('octoprint_version' not in params or
                params['octoprint_version'] is None):
            raise ValueError("Missing the required parameter `octoprint_version` when calling `events_predict_create`")  # noqa: E501
        # verify the required parameter 'print_job' is set
        if ('print_job' not in params or
                params['print_job'] is None):
            raise ValueError("Missing the required parameter `print_job` when calling `events_predict_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'original_image' in params:
            local_var_files['original_image'] = params['original_image']  # noqa: E501
        if 'annotated_image' in params:
            local_var_files['annotated_image'] = params['annotated_image']  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'print_job' in params:
            form_params.append(('print_job', params['print_job']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'original_image' in params:
            local_var_files['original_image'] = params['original_image']  # noqa: E501
        if 'annotated_image' in params:
            local_var_files['annotated_image'] = params['annotated_image']  # noqa: E501
        if 'event_data' in params:
            form_params.append(('event_data', params['event_data']))  # noqa: E501
        if 'plugin_version' in params:
            form_params.append(('plugin_version', params['plugin_version']))  # noqa: E501
        if 'octoprint_version' in params:
            form_params.append(('octoprint_version', params['octoprint_version']))  # noqa: E501
        if 'print_job' in params:
            form_params.append(('print_job', params['print_job']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/predict/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PredictEvent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_predict_list(self, **kwargs):  # noqa: E501
        """events_predict_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedPredictEventList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_predict_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.events_predict_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def events_predict_list_with_http_info(self, **kwargs):  # noqa: E501
        """events_predict_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_predict_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedPredictEventList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_predict_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/events/predict/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedPredictEventList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
