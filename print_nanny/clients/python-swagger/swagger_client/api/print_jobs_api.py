# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PrintJobsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def print_jobs_create(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs):  # noqa: E501
        """print_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_create(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs)  # noqa: E501
            return data

    def print_jobs_create_with_http_info(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs):  # noqa: E501
        """print_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash2' is set
        if ('gcode_file_hash2' not in params or
                params['gcode_file_hash2'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'last_status2' is set
        if ('last_status2' not in params or
                params['last_status2'] is None):
            raise ValueError("Missing the required parameter `last_status2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'printer_profile2' is set
        if ('printer_profile2' not in params or
                params['printer_profile2'] is None):
            raise ValueError("Missing the required parameter `printer_profile2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file2' is set
        if ('gcode_file2' not in params or
                params['gcode_file2'] is None):
            raise ValueError("Missing the required parameter `gcode_file2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash' is set
        if ('gcode_file_hash' not in params or
                params['gcode_file_hash'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'last_status' is set
        if ('last_status' not in params or
                params['last_status'] is None):
            raise ValueError("Missing the required parameter `last_status` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'printer_profile' is set
        if ('printer_profile' not in params or
                params['printer_profile'] is None):
            raise ValueError("Missing the required parameter `printer_profile` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file' is set
        if ('gcode_file' not in params or
                params['gcode_file'] is None):
            raise ValueError("Missing the required parameter `gcode_file` when calling `print_jobs_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_create(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs):  # noqa: E501
        """print_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_create(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs)  # noqa: E501
            return data

    def print_jobs_create_with_http_info(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs):  # noqa: E501
        """print_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash2' is set
        if ('gcode_file_hash2' not in params or
                params['gcode_file_hash2'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'last_status2' is set
        if ('last_status2' not in params or
                params['last_status2'] is None):
            raise ValueError("Missing the required parameter `last_status2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'printer_profile2' is set
        if ('printer_profile2' not in params or
                params['printer_profile2'] is None):
            raise ValueError("Missing the required parameter `printer_profile2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file2' is set
        if ('gcode_file2' not in params or
                params['gcode_file2'] is None):
            raise ValueError("Missing the required parameter `gcode_file2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash' is set
        if ('gcode_file_hash' not in params or
                params['gcode_file_hash'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'last_status' is set
        if ('last_status' not in params or
                params['last_status'] is None):
            raise ValueError("Missing the required parameter `last_status` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'printer_profile' is set
        if ('printer_profile' not in params or
                params['printer_profile'] is None):
            raise ValueError("Missing the required parameter `printer_profile` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file' is set
        if ('gcode_file' not in params or
                params['gcode_file'] is None):
            raise ValueError("Missing the required parameter `gcode_file` when calling `print_jobs_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_create(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs):  # noqa: E501
        """print_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_create(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs)  # noqa: E501
            return data

    def print_jobs_create_with_http_info(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, **kwargs):  # noqa: E501
        """print_jobs_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_create_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash2' is set
        if ('gcode_file_hash2' not in params or
                params['gcode_file_hash2'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'last_status2' is set
        if ('last_status2' not in params or
                params['last_status2'] is None):
            raise ValueError("Missing the required parameter `last_status2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'printer_profile2' is set
        if ('printer_profile2' not in params or
                params['printer_profile2'] is None):
            raise ValueError("Missing the required parameter `printer_profile2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file2' is set
        if ('gcode_file2' not in params or
                params['gcode_file2'] is None):
            raise ValueError("Missing the required parameter `gcode_file2` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash' is set
        if ('gcode_file_hash' not in params or
                params['gcode_file_hash'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'last_status' is set
        if ('last_status' not in params or
                params['last_status'] is None):
            raise ValueError("Missing the required parameter `last_status` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'printer_profile' is set
        if ('printer_profile' not in params or
                params['printer_profile'] is None):
            raise ValueError("Missing the required parameter `printer_profile` when calling `print_jobs_create`")  # noqa: E501
        # verify the required parameter 'gcode_file' is set
        if ('gcode_file' not in params or
                params['gcode_file'] is None):
            raise ValueError("Missing the required parameter `gcode_file` when calling `print_jobs_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_list(self, **kwargs):  # noqa: E501
        """print_jobs_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedPrintJobList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def print_jobs_list_with_http_info(self, **kwargs):  # noqa: E501
        """print_jobs_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedPrintJobList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedPrintJobList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_partial_update(self, id, **kwargs):  # noqa: E501
        """print_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :param PatchedPrintJobRequest body:
        :param datetime dt2:
        :param str name2:
        :param str gcode_file_hash2:
        :param LastStatusEnum last_status2:
        :param int printer_profile2:
        :param int gcode_file2:
        :param datetime dt:
        :param str name:
        :param str gcode_file_hash:
        :param LastStatusEnum last_status:
        :param int printer_profile:
        :param int gcode_file:
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def print_jobs_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """print_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :param PatchedPrintJobRequest body:
        :param datetime dt2:
        :param str name2:
        :param str gcode_file_hash2:
        :param LastStatusEnum last_status2:
        :param int printer_profile2:
        :param int gcode_file2:
        :param datetime dt:
        :param str name:
        :param str gcode_file_hash:
        :param LastStatusEnum last_status:
        :param int printer_profile:
        :param int gcode_file:
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_jobs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_partial_update(self, id, **kwargs):  # noqa: E501
        """print_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :param PatchedPrintJobRequest body:
        :param datetime dt2:
        :param str name2:
        :param str gcode_file_hash2:
        :param LastStatusEnum last_status2:
        :param int printer_profile2:
        :param int gcode_file2:
        :param datetime dt:
        :param str name:
        :param str gcode_file_hash:
        :param LastStatusEnum last_status:
        :param int printer_profile:
        :param int gcode_file:
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def print_jobs_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """print_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :param PatchedPrintJobRequest body:
        :param datetime dt2:
        :param str name2:
        :param str gcode_file_hash2:
        :param LastStatusEnum last_status2:
        :param int printer_profile2:
        :param int gcode_file2:
        :param datetime dt:
        :param str name:
        :param str gcode_file_hash:
        :param LastStatusEnum last_status:
        :param int printer_profile:
        :param int gcode_file:
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_jobs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_partial_update(self, id, **kwargs):  # noqa: E501
        """print_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :param PatchedPrintJobRequest body:
        :param datetime dt2:
        :param str name2:
        :param str gcode_file_hash2:
        :param LastStatusEnum last_status2:
        :param int printer_profile2:
        :param int gcode_file2:
        :param datetime dt:
        :param str name:
        :param str gcode_file_hash:
        :param LastStatusEnum last_status:
        :param int printer_profile:
        :param int gcode_file:
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def print_jobs_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """print_jobs_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :param PatchedPrintJobRequest body:
        :param datetime dt2:
        :param str name2:
        :param str gcode_file_hash2:
        :param LastStatusEnum last_status2:
        :param int printer_profile2:
        :param int gcode_file2:
        :param datetime dt:
        :param str name:
        :param str gcode_file_hash:
        :param LastStatusEnum last_status:
        :param int printer_profile:
        :param int gcode_file:
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_jobs_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_retrieve(self, id, **kwargs):  # noqa: E501
        """print_jobs_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def print_jobs_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """print_jobs_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_jobs_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_update(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs):  # noqa: E501
        """print_jobs_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_update(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs)  # noqa: E501
            return data

    def print_jobs_update_with_http_info(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs):  # noqa: E501
        """print_jobs_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash2' is set
        if ('gcode_file_hash2' not in params or
                params['gcode_file_hash2'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'last_status2' is set
        if ('last_status2' not in params or
                params['last_status2'] is None):
            raise ValueError("Missing the required parameter `last_status2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'printer_profile2' is set
        if ('printer_profile2' not in params or
                params['printer_profile2'] is None):
            raise ValueError("Missing the required parameter `printer_profile2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file2' is set
        if ('gcode_file2' not in params or
                params['gcode_file2'] is None):
            raise ValueError("Missing the required parameter `gcode_file2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash' is set
        if ('gcode_file_hash' not in params or
                params['gcode_file_hash'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'last_status' is set
        if ('last_status' not in params or
                params['last_status'] is None):
            raise ValueError("Missing the required parameter `last_status` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'printer_profile' is set
        if ('printer_profile' not in params or
                params['printer_profile'] is None):
            raise ValueError("Missing the required parameter `printer_profile` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file' is set
        if ('gcode_file' not in params or
                params['gcode_file'] is None):
            raise ValueError("Missing the required parameter `gcode_file` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_jobs_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_update(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs):  # noqa: E501
        """print_jobs_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_update(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs)  # noqa: E501
            return data

    def print_jobs_update_with_http_info(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs):  # noqa: E501
        """print_jobs_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash2' is set
        if ('gcode_file_hash2' not in params or
                params['gcode_file_hash2'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'last_status2' is set
        if ('last_status2' not in params or
                params['last_status2'] is None):
            raise ValueError("Missing the required parameter `last_status2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'printer_profile2' is set
        if ('printer_profile2' not in params or
                params['printer_profile2'] is None):
            raise ValueError("Missing the required parameter `printer_profile2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file2' is set
        if ('gcode_file2' not in params or
                params['gcode_file2'] is None):
            raise ValueError("Missing the required parameter `gcode_file2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash' is set
        if ('gcode_file_hash' not in params or
                params['gcode_file_hash'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'last_status' is set
        if ('last_status' not in params or
                params['last_status'] is None):
            raise ValueError("Missing the required parameter `last_status` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'printer_profile' is set
        if ('printer_profile' not in params or
                params['printer_profile'] is None):
            raise ValueError("Missing the required parameter `printer_profile` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file' is set
        if ('gcode_file' not in params or
                params['gcode_file'] is None):
            raise ValueError("Missing the required parameter `gcode_file` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_jobs_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_jobs_update(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs):  # noqa: E501
        """print_jobs_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_update(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs)  # noqa: E501
        else:
            (data) = self.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs)  # noqa: E501
            return data

    def print_jobs_update_with_http_info(self, body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, **kwargs):  # noqa: E501
        """print_jobs_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_jobs_update_with_http_info(body, dt2, name2, gcode_file_hash2, last_status2, printer_profile2, gcode_file2, dt, name, gcode_file_hash, last_status, printer_profile, gcode_file, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrintJobRequest body: (required)
        :param datetime dt2: (required)
        :param str name2: (required)
        :param str gcode_file_hash2: (required)
        :param LastStatusEnum last_status2: (required)
        :param int printer_profile2: (required)
        :param int gcode_file2: (required)
        :param datetime dt: (required)
        :param str name: (required)
        :param str gcode_file_hash: (required)
        :param LastStatusEnum last_status: (required)
        :param int printer_profile: (required)
        :param int gcode_file: (required)
        :param int id: A unique integer value identifying this print job. (required)
        :return: PrintJob
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dt2', 'name2', 'gcode_file_hash2', 'last_status2', 'printer_profile2', 'gcode_file2', 'dt', 'name', 'gcode_file_hash', 'last_status', 'printer_profile', 'gcode_file', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_jobs_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'dt2' is set
        if ('dt2' not in params or
                params['dt2'] is None):
            raise ValueError("Missing the required parameter `dt2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash2' is set
        if ('gcode_file_hash2' not in params or
                params['gcode_file_hash2'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'last_status2' is set
        if ('last_status2' not in params or
                params['last_status2'] is None):
            raise ValueError("Missing the required parameter `last_status2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'printer_profile2' is set
        if ('printer_profile2' not in params or
                params['printer_profile2'] is None):
            raise ValueError("Missing the required parameter `printer_profile2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file2' is set
        if ('gcode_file2' not in params or
                params['gcode_file2'] is None):
            raise ValueError("Missing the required parameter `gcode_file2` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'dt' is set
        if ('dt' not in params or
                params['dt'] is None):
            raise ValueError("Missing the required parameter `dt` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file_hash' is set
        if ('gcode_file_hash' not in params or
                params['gcode_file_hash'] is None):
            raise ValueError("Missing the required parameter `gcode_file_hash` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'last_status' is set
        if ('last_status' not in params or
                params['last_status'] is None):
            raise ValueError("Missing the required parameter `last_status` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'printer_profile' is set
        if ('printer_profile' not in params or
                params['printer_profile'] is None):
            raise ValueError("Missing the required parameter `printer_profile` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'gcode_file' is set
        if ('gcode_file' not in params or
                params['gcode_file'] is None):
            raise ValueError("Missing the required parameter `gcode_file` when calling `print_jobs_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `print_jobs_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501
        if 'dt' in params:
            form_params.append(('dt', params['dt']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'gcode_file_hash' in params:
            form_params.append(('gcode_file_hash', params['gcode_file_hash']))  # noqa: E501
        if 'last_status' in params:
            form_params.append(('last_status', params['last_status']))  # noqa: E501
        if 'printer_profile' in params:
            form_params.append(('printer_profile', params['printer_profile']))  # noqa: E501
        if 'gcode_file' in params:
            form_params.append(('gcode_file', params['gcode_file']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/print_jobs/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintJob',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
