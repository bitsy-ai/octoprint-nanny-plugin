# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrintJobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dt': 'datetime',
        'name': 'str',
        'gcode_file_hash': 'str',
        'last_status': 'LastStatusEnum',
        'printer_profile': 'int',
        'gcode_file': 'int'
    }

    attribute_map = {
        'dt': 'dt',
        'name': 'name',
        'gcode_file_hash': 'gcode_file_hash',
        'last_status': 'last_status',
        'printer_profile': 'printer_profile',
        'gcode_file': 'gcode_file'
    }

    def __init__(self, dt=None, name=None, gcode_file_hash=None, last_status=None, printer_profile=None, gcode_file=None):  # noqa: E501
        """PrintJobRequest - a model defined in Swagger"""  # noqa: E501
        self._dt = None
        self._name = None
        self._gcode_file_hash = None
        self._last_status = None
        self._printer_profile = None
        self._gcode_file = None
        self.discriminator = None
        self.dt = dt
        self.name = name
        if gcode_file_hash is not None:
            self.gcode_file_hash = gcode_file_hash
        if last_status is not None:
            self.last_status = last_status
        self.printer_profile = printer_profile
        if gcode_file is not None:
            self.gcode_file = gcode_file

    @property
    def dt(self):
        """Gets the dt of this PrintJobRequest.  # noqa: E501


        :return: The dt of this PrintJobRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this PrintJobRequest.


        :param dt: The dt of this PrintJobRequest.  # noqa: E501
        :type: datetime
        """
        if dt is None:
            raise ValueError("Invalid value for `dt`, must not be `None`")  # noqa: E501

        self._dt = dt

    @property
    def name(self):
        """Gets the name of this PrintJobRequest.  # noqa: E501


        :return: The name of this PrintJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrintJobRequest.


        :param name: The name of this PrintJobRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def gcode_file_hash(self):
        """Gets the gcode_file_hash of this PrintJobRequest.  # noqa: E501


        :return: The gcode_file_hash of this PrintJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._gcode_file_hash

    @gcode_file_hash.setter
    def gcode_file_hash(self, gcode_file_hash):
        """Sets the gcode_file_hash of this PrintJobRequest.


        :param gcode_file_hash: The gcode_file_hash of this PrintJobRequest.  # noqa: E501
        :type: str
        """

        self._gcode_file_hash = gcode_file_hash

    @property
    def last_status(self):
        """Gets the last_status of this PrintJobRequest.  # noqa: E501


        :return: The last_status of this PrintJobRequest.  # noqa: E501
        :rtype: LastStatusEnum
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this PrintJobRequest.


        :param last_status: The last_status of this PrintJobRequest.  # noqa: E501
        :type: LastStatusEnum
        """

        self._last_status = last_status

    @property
    def printer_profile(self):
        """Gets the printer_profile of this PrintJobRequest.  # noqa: E501


        :return: The printer_profile of this PrintJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._printer_profile

    @printer_profile.setter
    def printer_profile(self, printer_profile):
        """Sets the printer_profile of this PrintJobRequest.


        :param printer_profile: The printer_profile of this PrintJobRequest.  # noqa: E501
        :type: int
        """
        if printer_profile is None:
            raise ValueError("Invalid value for `printer_profile`, must not be `None`")  # noqa: E501

        self._printer_profile = printer_profile

    @property
    def gcode_file(self):
        """Gets the gcode_file of this PrintJobRequest.  # noqa: E501


        :return: The gcode_file of this PrintJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._gcode_file

    @gcode_file.setter
    def gcode_file(self, gcode_file):
        """Sets the gcode_file of this PrintJobRequest.


        :param gcode_file: The gcode_file of this PrintJobRequest.  # noqa: E501
        :type: int
        """

        self._gcode_file = gcode_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrintJobRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrintJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
