# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PredictEventRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dt': 'datetime',
        'original_image': 'str',
        'annotated_image': 'str',
        'event_data': 'dict(str, Object)',
        'plugin_version': 'str',
        'octoprint_version': 'str',
        'print_job': 'int'
    }

    attribute_map = {
        'dt': 'dt',
        'original_image': 'original_image',
        'annotated_image': 'annotated_image',
        'event_data': 'event_data',
        'plugin_version': 'plugin_version',
        'octoprint_version': 'octoprint_version',
        'print_job': 'print_job'
    }

    def __init__(self, dt=None, original_image=None, annotated_image=None, event_data=None, plugin_version=None, octoprint_version=None, print_job=None):  # noqa: E501
        """PredictEventRequest - a model defined in Swagger"""  # noqa: E501
        self._dt = None
        self._original_image = None
        self._annotated_image = None
        self._event_data = None
        self._plugin_version = None
        self._octoprint_version = None
        self._print_job = None
        self.discriminator = None
        if dt is not None:
            self.dt = dt
        self.original_image = original_image
        self.annotated_image = annotated_image
        if event_data is not None:
            self.event_data = event_data
        self.plugin_version = plugin_version
        self.octoprint_version = octoprint_version
        if print_job is not None:
            self.print_job = print_job

    @property
    def dt(self):
        """Gets the dt of this PredictEventRequest.  # noqa: E501


        :return: The dt of this PredictEventRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this PredictEventRequest.


        :param dt: The dt of this PredictEventRequest.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def original_image(self):
        """Gets the original_image of this PredictEventRequest.  # noqa: E501


        :return: The original_image of this PredictEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._original_image

    @original_image.setter
    def original_image(self, original_image):
        """Sets the original_image of this PredictEventRequest.


        :param original_image: The original_image of this PredictEventRequest.  # noqa: E501
        :type: str
        """
        if original_image is None:
            raise ValueError("Invalid value for `original_image`, must not be `None`")  # noqa: E501

        self._original_image = original_image

    @property
    def annotated_image(self):
        """Gets the annotated_image of this PredictEventRequest.  # noqa: E501


        :return: The annotated_image of this PredictEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._annotated_image

    @annotated_image.setter
    def annotated_image(self, annotated_image):
        """Sets the annotated_image of this PredictEventRequest.


        :param annotated_image: The annotated_image of this PredictEventRequest.  # noqa: E501
        :type: str
        """
        if annotated_image is None:
            raise ValueError("Invalid value for `annotated_image`, must not be `None`")  # noqa: E501

        self._annotated_image = annotated_image

    @property
    def event_data(self):
        """Gets the event_data of this PredictEventRequest.  # noqa: E501


        :return: The event_data of this PredictEventRequest.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this PredictEventRequest.


        :param event_data: The event_data of this PredictEventRequest.  # noqa: E501
        :type: dict(str, Object)
        """

        self._event_data = event_data

    @property
    def plugin_version(self):
        """Gets the plugin_version of this PredictEventRequest.  # noqa: E501


        :return: The plugin_version of this PredictEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._plugin_version

    @plugin_version.setter
    def plugin_version(self, plugin_version):
        """Sets the plugin_version of this PredictEventRequest.


        :param plugin_version: The plugin_version of this PredictEventRequest.  # noqa: E501
        :type: str
        """
        if plugin_version is None:
            raise ValueError("Invalid value for `plugin_version`, must not be `None`")  # noqa: E501

        self._plugin_version = plugin_version

    @property
    def octoprint_version(self):
        """Gets the octoprint_version of this PredictEventRequest.  # noqa: E501


        :return: The octoprint_version of this PredictEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._octoprint_version

    @octoprint_version.setter
    def octoprint_version(self, octoprint_version):
        """Sets the octoprint_version of this PredictEventRequest.


        :param octoprint_version: The octoprint_version of this PredictEventRequest.  # noqa: E501
        :type: str
        """
        if octoprint_version is None:
            raise ValueError("Invalid value for `octoprint_version`, must not be `None`")  # noqa: E501

        self._octoprint_version = octoprint_version

    @property
    def print_job(self):
        """Gets the print_job of this PredictEventRequest.  # noqa: E501


        :return: The print_job of this PredictEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._print_job

    @print_job.setter
    def print_job(self, print_job):
        """Sets the print_job of this PredictEventRequest.


        :param print_job: The print_job of this PredictEventRequest.  # noqa: E501
        :type: int
        """

        self._print_job = print_job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PredictEventRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PredictEventRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
