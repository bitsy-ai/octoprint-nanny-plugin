# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from print_nanny_client.api_client import ApiClient


class PrinterProfilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def printer_profiles_create(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_create(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
            return data

    def printer_profiles_create_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_create(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_create(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
            return data

    def printer_profiles_create_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_create(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_create(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
            return data

    def printer_profiles_create_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_create`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_list(self, **kwargs):  # noqa: E501
        """printer_profiles_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param str name: name
        :param int offset: The initial index from which to return the results.
        :param str user: user
        :return: PaginatedPrinterProfileList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def printer_profiles_list_with_http_info(self, **kwargs):  # noqa: E501
        """printer_profiles_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param str name: name
        :param int offset: The initial index from which to return the results.
        :param str user: user
        :return: PaginatedPrinterProfileList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'name', 'offset', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedPrinterProfileList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_partial_update(self, id, **kwargs):  # noqa: E501
        """printer_profiles_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :param PatchedPrinterProfileRequest body:
        :param bool axes_e_inverted2:
        :param int axes_e_speed2:
        :param int axes_x_speed2:
        :param bool axes_x_inverted2:
        :param bool axes_y_inverted2:
        :param int axes_y_speed2:
        :param bool axes_z_inverted2:
        :param int axes_z_speed2:
        :param int extruder_count2:
        :param float extruder_nozzle_diameter2:
        :param list[list[float]] extruder_offsets2:
        :param bool extruder_shared_nozzle2:
        :param bool heated_bed2:
        :param bool heated_chamber2:
        :param str model2:
        :param str name2:
        :param bool volume_custom_box2:
        :param float volume_depth2:
        :param str volume_formfactor2:
        :param float volume_height2:
        :param str volume_origin2:
        :param float volume_width2:
        :param bool axes_e_inverted:
        :param int axes_e_speed:
        :param int axes_x_speed:
        :param bool axes_x_inverted:
        :param bool axes_y_inverted:
        :param int axes_y_speed:
        :param bool axes_z_inverted:
        :param int axes_z_speed:
        :param int extruder_count:
        :param float extruder_nozzle_diameter:
        :param list[list[float]] extruder_offsets:
        :param bool extruder_shared_nozzle:
        :param bool heated_bed:
        :param bool heated_chamber:
        :param str model:
        :param str name:
        :param bool volume_custom_box:
        :param float volume_depth:
        :param str volume_formfactor:
        :param float volume_height:
        :param str volume_origin:
        :param float volume_width:
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def printer_profiles_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """printer_profiles_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :param PatchedPrinterProfileRequest body:
        :param bool axes_e_inverted2:
        :param int axes_e_speed2:
        :param int axes_x_speed2:
        :param bool axes_x_inverted2:
        :param bool axes_y_inverted2:
        :param int axes_y_speed2:
        :param bool axes_z_inverted2:
        :param int axes_z_speed2:
        :param int extruder_count2:
        :param float extruder_nozzle_diameter2:
        :param list[list[float]] extruder_offsets2:
        :param bool extruder_shared_nozzle2:
        :param bool heated_bed2:
        :param bool heated_chamber2:
        :param str model2:
        :param str name2:
        :param bool volume_custom_box2:
        :param float volume_depth2:
        :param str volume_formfactor2:
        :param float volume_height2:
        :param str volume_origin2:
        :param float volume_width2:
        :param bool axes_e_inverted:
        :param int axes_e_speed:
        :param int axes_x_speed:
        :param bool axes_x_inverted:
        :param bool axes_y_inverted:
        :param int axes_y_speed:
        :param bool axes_z_inverted:
        :param int axes_z_speed:
        :param int extruder_count:
        :param float extruder_nozzle_diameter:
        :param list[list[float]] extruder_offsets:
        :param bool extruder_shared_nozzle:
        :param bool heated_bed:
        :param bool heated_chamber:
        :param str model:
        :param str name:
        :param bool volume_custom_box:
        :param float volume_depth:
        :param str volume_formfactor:
        :param float volume_height:
        :param str volume_origin:
        :param float volume_width:
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `printer_profiles_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_partial_update(self, id, **kwargs):  # noqa: E501
        """printer_profiles_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :param PatchedPrinterProfileRequest body:
        :param bool axes_e_inverted2:
        :param int axes_e_speed2:
        :param int axes_x_speed2:
        :param bool axes_x_inverted2:
        :param bool axes_y_inverted2:
        :param int axes_y_speed2:
        :param bool axes_z_inverted2:
        :param int axes_z_speed2:
        :param int extruder_count2:
        :param float extruder_nozzle_diameter2:
        :param list[list[float]] extruder_offsets2:
        :param bool extruder_shared_nozzle2:
        :param bool heated_bed2:
        :param bool heated_chamber2:
        :param str model2:
        :param str name2:
        :param bool volume_custom_box2:
        :param float volume_depth2:
        :param str volume_formfactor2:
        :param float volume_height2:
        :param str volume_origin2:
        :param float volume_width2:
        :param bool axes_e_inverted:
        :param int axes_e_speed:
        :param int axes_x_speed:
        :param bool axes_x_inverted:
        :param bool axes_y_inverted:
        :param int axes_y_speed:
        :param bool axes_z_inverted:
        :param int axes_z_speed:
        :param int extruder_count:
        :param float extruder_nozzle_diameter:
        :param list[list[float]] extruder_offsets:
        :param bool extruder_shared_nozzle:
        :param bool heated_bed:
        :param bool heated_chamber:
        :param str model:
        :param str name:
        :param bool volume_custom_box:
        :param float volume_depth:
        :param str volume_formfactor:
        :param float volume_height:
        :param str volume_origin:
        :param float volume_width:
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def printer_profiles_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """printer_profiles_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :param PatchedPrinterProfileRequest body:
        :param bool axes_e_inverted2:
        :param int axes_e_speed2:
        :param int axes_x_speed2:
        :param bool axes_x_inverted2:
        :param bool axes_y_inverted2:
        :param int axes_y_speed2:
        :param bool axes_z_inverted2:
        :param int axes_z_speed2:
        :param int extruder_count2:
        :param float extruder_nozzle_diameter2:
        :param list[list[float]] extruder_offsets2:
        :param bool extruder_shared_nozzle2:
        :param bool heated_bed2:
        :param bool heated_chamber2:
        :param str model2:
        :param str name2:
        :param bool volume_custom_box2:
        :param float volume_depth2:
        :param str volume_formfactor2:
        :param float volume_height2:
        :param str volume_origin2:
        :param float volume_width2:
        :param bool axes_e_inverted:
        :param int axes_e_speed:
        :param int axes_x_speed:
        :param bool axes_x_inverted:
        :param bool axes_y_inverted:
        :param int axes_y_speed:
        :param bool axes_z_inverted:
        :param int axes_z_speed:
        :param int extruder_count:
        :param float extruder_nozzle_diameter:
        :param list[list[float]] extruder_offsets:
        :param bool extruder_shared_nozzle:
        :param bool heated_bed:
        :param bool heated_chamber:
        :param str model:
        :param str name:
        :param bool volume_custom_box:
        :param float volume_depth:
        :param str volume_formfactor:
        :param float volume_height:
        :param str volume_origin:
        :param float volume_width:
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `printer_profiles_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_partial_update(self, id, **kwargs):  # noqa: E501
        """printer_profiles_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :param PatchedPrinterProfileRequest body:
        :param bool axes_e_inverted2:
        :param int axes_e_speed2:
        :param int axes_x_speed2:
        :param bool axes_x_inverted2:
        :param bool axes_y_inverted2:
        :param int axes_y_speed2:
        :param bool axes_z_inverted2:
        :param int axes_z_speed2:
        :param int extruder_count2:
        :param float extruder_nozzle_diameter2:
        :param list[list[float]] extruder_offsets2:
        :param bool extruder_shared_nozzle2:
        :param bool heated_bed2:
        :param bool heated_chamber2:
        :param str model2:
        :param str name2:
        :param bool volume_custom_box2:
        :param float volume_depth2:
        :param str volume_formfactor2:
        :param float volume_height2:
        :param str volume_origin2:
        :param float volume_width2:
        :param bool axes_e_inverted:
        :param int axes_e_speed:
        :param int axes_x_speed:
        :param bool axes_x_inverted:
        :param bool axes_y_inverted:
        :param int axes_y_speed:
        :param bool axes_z_inverted:
        :param int axes_z_speed:
        :param int extruder_count:
        :param float extruder_nozzle_diameter:
        :param list[list[float]] extruder_offsets:
        :param bool extruder_shared_nozzle:
        :param bool heated_bed:
        :param bool heated_chamber:
        :param str model:
        :param str name:
        :param bool volume_custom_box:
        :param float volume_depth:
        :param str volume_formfactor:
        :param float volume_height:
        :param str volume_origin:
        :param float volume_width:
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def printer_profiles_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """printer_profiles_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :param PatchedPrinterProfileRequest body:
        :param bool axes_e_inverted2:
        :param int axes_e_speed2:
        :param int axes_x_speed2:
        :param bool axes_x_inverted2:
        :param bool axes_y_inverted2:
        :param int axes_y_speed2:
        :param bool axes_z_inverted2:
        :param int axes_z_speed2:
        :param int extruder_count2:
        :param float extruder_nozzle_diameter2:
        :param list[list[float]] extruder_offsets2:
        :param bool extruder_shared_nozzle2:
        :param bool heated_bed2:
        :param bool heated_chamber2:
        :param str model2:
        :param str name2:
        :param bool volume_custom_box2:
        :param float volume_depth2:
        :param str volume_formfactor2:
        :param float volume_height2:
        :param str volume_origin2:
        :param float volume_width2:
        :param bool axes_e_inverted:
        :param int axes_e_speed:
        :param int axes_x_speed:
        :param bool axes_x_inverted:
        :param bool axes_y_inverted:
        :param int axes_y_speed:
        :param bool axes_z_inverted:
        :param int axes_z_speed:
        :param int extruder_count:
        :param float extruder_nozzle_diameter:
        :param list[list[float]] extruder_offsets:
        :param bool extruder_shared_nozzle:
        :param bool heated_bed:
        :param bool heated_chamber:
        :param str model:
        :param str name:
        :param bool volume_custom_box:
        :param float volume_depth:
        :param str volume_formfactor:
        :param float volume_height:
        :param str volume_origin:
        :param float volume_width:
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `printer_profiles_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_retrieve(self, id, **kwargs):  # noqa: E501
        """printer_profiles_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def printer_profiles_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """printer_profiles_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `printer_profiles_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_update(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs):  # noqa: E501
        """printer_profiles_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs)  # noqa: E501
            return data

    def printer_profiles_update_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs):  # noqa: E501
        """printer_profiles_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `printer_profiles_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_update(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs):  # noqa: E501
        """printer_profiles_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs)  # noqa: E501
            return data

    def printer_profiles_update_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs):  # noqa: E501
        """printer_profiles_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `printer_profiles_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_update(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs):  # noqa: E501
        """printer_profiles_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs)  # noqa: E501
            return data

    def printer_profiles_update_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, **kwargs):  # noqa: E501
        """printer_profiles_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :param int id: A unique integer value identifying this printer profile. (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `printer_profiles_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_update_or_create(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_update_or_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_or_create(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
            return data

    def printer_profiles_update_or_create_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_update_or_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_update_or_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_update_or_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/update_or_create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_update_or_create(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_update_or_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_or_create(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
            return data

    def printer_profiles_update_or_create_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_update_or_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_update_or_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_update_or_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/update_or_create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def printer_profiles_update_or_create(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_update_or_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_or_create(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
        else:
            (data) = self.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs)  # noqa: E501
            return data

    def printer_profiles_update_or_create_with_http_info(self, body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, **kwargs):  # noqa: E501
        """printer_profiles_update_or_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.printer_profiles_update_or_create_with_http_info(body, axes_e_inverted2, axes_e_speed2, axes_x_speed2, axes_x_inverted2, axes_y_inverted2, axes_y_speed2, axes_z_inverted2, axes_z_speed2, extruder_count2, extruder_nozzle_diameter2, extruder_offsets2, extruder_shared_nozzle2, heated_bed2, heated_chamber2, model2, name2, volume_custom_box2, volume_depth2, volume_formfactor2, volume_height2, volume_origin2, volume_width2, axes_e_inverted, axes_e_speed, axes_x_speed, axes_x_inverted, axes_y_inverted, axes_y_speed, axes_z_inverted, axes_z_speed, extruder_count, extruder_nozzle_diameter, extruder_offsets, extruder_shared_nozzle, heated_bed, heated_chamber, model, name, volume_custom_box, volume_depth, volume_formfactor, volume_height, volume_origin, volume_width, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrinterProfileRequest body: (required)
        :param bool axes_e_inverted2: (required)
        :param int axes_e_speed2: (required)
        :param int axes_x_speed2: (required)
        :param bool axes_x_inverted2: (required)
        :param bool axes_y_inverted2: (required)
        :param int axes_y_speed2: (required)
        :param bool axes_z_inverted2: (required)
        :param int axes_z_speed2: (required)
        :param int extruder_count2: (required)
        :param float extruder_nozzle_diameter2: (required)
        :param list[list[float]] extruder_offsets2: (required)
        :param bool extruder_shared_nozzle2: (required)
        :param bool heated_bed2: (required)
        :param bool heated_chamber2: (required)
        :param str model2: (required)
        :param str name2: (required)
        :param bool volume_custom_box2: (required)
        :param float volume_depth2: (required)
        :param str volume_formfactor2: (required)
        :param float volume_height2: (required)
        :param str volume_origin2: (required)
        :param float volume_width2: (required)
        :param bool axes_e_inverted: (required)
        :param int axes_e_speed: (required)
        :param int axes_x_speed: (required)
        :param bool axes_x_inverted: (required)
        :param bool axes_y_inverted: (required)
        :param int axes_y_speed: (required)
        :param bool axes_z_inverted: (required)
        :param int axes_z_speed: (required)
        :param int extruder_count: (required)
        :param float extruder_nozzle_diameter: (required)
        :param list[list[float]] extruder_offsets: (required)
        :param bool extruder_shared_nozzle: (required)
        :param bool heated_bed: (required)
        :param bool heated_chamber: (required)
        :param str model: (required)
        :param str name: (required)
        :param bool volume_custom_box: (required)
        :param float volume_depth: (required)
        :param str volume_formfactor: (required)
        :param float volume_height: (required)
        :param str volume_origin: (required)
        :param float volume_width: (required)
        :return: PrinterProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'axes_e_inverted2', 'axes_e_speed2', 'axes_x_speed2', 'axes_x_inverted2', 'axes_y_inverted2', 'axes_y_speed2', 'axes_z_inverted2', 'axes_z_speed2', 'extruder_count2', 'extruder_nozzle_diameter2', 'extruder_offsets2', 'extruder_shared_nozzle2', 'heated_bed2', 'heated_chamber2', 'model2', 'name2', 'volume_custom_box2', 'volume_depth2', 'volume_formfactor2', 'volume_height2', 'volume_origin2', 'volume_width2', 'axes_e_inverted', 'axes_e_speed', 'axes_x_speed', 'axes_x_inverted', 'axes_y_inverted', 'axes_y_speed', 'axes_z_inverted', 'axes_z_speed', 'extruder_count', 'extruder_nozzle_diameter', 'extruder_offsets', 'extruder_shared_nozzle', 'heated_bed', 'heated_chamber', 'model', 'name', 'volume_custom_box', 'volume_depth', 'volume_formfactor', 'volume_height', 'volume_origin', 'volume_width']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printer_profiles_update_or_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted2' is set
        if ('axes_e_inverted2' not in params or
                params['axes_e_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed2' is set
        if ('axes_e_speed2' not in params or
                params['axes_e_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed2' is set
        if ('axes_x_speed2' not in params or
                params['axes_x_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted2' is set
        if ('axes_x_inverted2' not in params or
                params['axes_x_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted2' is set
        if ('axes_y_inverted2' not in params or
                params['axes_y_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed2' is set
        if ('axes_y_speed2' not in params or
                params['axes_y_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted2' is set
        if ('axes_z_inverted2' not in params or
                params['axes_z_inverted2'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed2' is set
        if ('axes_z_speed2' not in params or
                params['axes_z_speed2'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_count2' is set
        if ('extruder_count2' not in params or
                params['extruder_count2'] is None):
            raise ValueError("Missing the required parameter `extruder_count2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter2' is set
        if ('extruder_nozzle_diameter2' not in params or
                params['extruder_nozzle_diameter2'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets2' is set
        if ('extruder_offsets2' not in params or
                params['extruder_offsets2'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle2' is set
        if ('extruder_shared_nozzle2' not in params or
                params['extruder_shared_nozzle2'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_bed2' is set
        if ('heated_bed2' not in params or
                params['heated_bed2'] is None):
            raise ValueError("Missing the required parameter `heated_bed2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber2' is set
        if ('heated_chamber2' not in params or
                params['heated_chamber2'] is None):
            raise ValueError("Missing the required parameter `heated_chamber2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'model2' is set
        if ('model2' not in params or
                params['model2'] is None):
            raise ValueError("Missing the required parameter `model2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box2' is set
        if ('volume_custom_box2' not in params or
                params['volume_custom_box2'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_depth2' is set
        if ('volume_depth2' not in params or
                params['volume_depth2'] is None):
            raise ValueError("Missing the required parameter `volume_depth2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor2' is set
        if ('volume_formfactor2' not in params or
                params['volume_formfactor2'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_height2' is set
        if ('volume_height2' not in params or
                params['volume_height2'] is None):
            raise ValueError("Missing the required parameter `volume_height2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_origin2' is set
        if ('volume_origin2' not in params or
                params['volume_origin2'] is None):
            raise ValueError("Missing the required parameter `volume_origin2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_width2' is set
        if ('volume_width2' not in params or
                params['volume_width2'] is None):
            raise ValueError("Missing the required parameter `volume_width2` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_inverted' is set
        if ('axes_e_inverted' not in params or
                params['axes_e_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_e_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_e_speed' is set
        if ('axes_e_speed' not in params or
                params['axes_e_speed'] is None):
            raise ValueError("Missing the required parameter `axes_e_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_speed' is set
        if ('axes_x_speed' not in params or
                params['axes_x_speed'] is None):
            raise ValueError("Missing the required parameter `axes_x_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_x_inverted' is set
        if ('axes_x_inverted' not in params or
                params['axes_x_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_x_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_inverted' is set
        if ('axes_y_inverted' not in params or
                params['axes_y_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_y_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_y_speed' is set
        if ('axes_y_speed' not in params or
                params['axes_y_speed'] is None):
            raise ValueError("Missing the required parameter `axes_y_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_inverted' is set
        if ('axes_z_inverted' not in params or
                params['axes_z_inverted'] is None):
            raise ValueError("Missing the required parameter `axes_z_inverted` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'axes_z_speed' is set
        if ('axes_z_speed' not in params or
                params['axes_z_speed'] is None):
            raise ValueError("Missing the required parameter `axes_z_speed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_count' is set
        if ('extruder_count' not in params or
                params['extruder_count'] is None):
            raise ValueError("Missing the required parameter `extruder_count` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_nozzle_diameter' is set
        if ('extruder_nozzle_diameter' not in params or
                params['extruder_nozzle_diameter'] is None):
            raise ValueError("Missing the required parameter `extruder_nozzle_diameter` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_offsets' is set
        if ('extruder_offsets' not in params or
                params['extruder_offsets'] is None):
            raise ValueError("Missing the required parameter `extruder_offsets` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'extruder_shared_nozzle' is set
        if ('extruder_shared_nozzle' not in params or
                params['extruder_shared_nozzle'] is None):
            raise ValueError("Missing the required parameter `extruder_shared_nozzle` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_bed' is set
        if ('heated_bed' not in params or
                params['heated_bed'] is None):
            raise ValueError("Missing the required parameter `heated_bed` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'heated_chamber' is set
        if ('heated_chamber' not in params or
                params['heated_chamber'] is None):
            raise ValueError("Missing the required parameter `heated_chamber` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_custom_box' is set
        if ('volume_custom_box' not in params or
                params['volume_custom_box'] is None):
            raise ValueError("Missing the required parameter `volume_custom_box` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_depth' is set
        if ('volume_depth' not in params or
                params['volume_depth'] is None):
            raise ValueError("Missing the required parameter `volume_depth` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_formfactor' is set
        if ('volume_formfactor' not in params or
                params['volume_formfactor'] is None):
            raise ValueError("Missing the required parameter `volume_formfactor` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_height' is set
        if ('volume_height' not in params or
                params['volume_height'] is None):
            raise ValueError("Missing the required parameter `volume_height` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_origin' is set
        if ('volume_origin' not in params or
                params['volume_origin'] is None):
            raise ValueError("Missing the required parameter `volume_origin` when calling `printer_profiles_update_or_create`")  # noqa: E501
        # verify the required parameter 'volume_width' is set
        if ('volume_width' not in params or
                params['volume_width'] is None):
            raise ValueError("Missing the required parameter `volume_width` when calling `printer_profiles_update_or_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501
        if 'axes_e_inverted' in params:
            form_params.append(('axes_e_inverted', params['axes_e_inverted']))  # noqa: E501
        if 'axes_e_speed' in params:
            form_params.append(('axes_e_speed', params['axes_e_speed']))  # noqa: E501
        if 'axes_x_speed' in params:
            form_params.append(('axes_x_speed', params['axes_x_speed']))  # noqa: E501
        if 'axes_x_inverted' in params:
            form_params.append(('axes_x_inverted', params['axes_x_inverted']))  # noqa: E501
        if 'axes_y_inverted' in params:
            form_params.append(('axes_y_inverted', params['axes_y_inverted']))  # noqa: E501
        if 'axes_y_speed' in params:
            form_params.append(('axes_y_speed', params['axes_y_speed']))  # noqa: E501
        if 'axes_z_inverted' in params:
            form_params.append(('axes_z_inverted', params['axes_z_inverted']))  # noqa: E501
        if 'axes_z_speed' in params:
            form_params.append(('axes_z_speed', params['axes_z_speed']))  # noqa: E501
        if 'extruder_count' in params:
            form_params.append(('extruder_count', params['extruder_count']))  # noqa: E501
        if 'extruder_nozzle_diameter' in params:
            form_params.append(('extruder_nozzle_diameter', params['extruder_nozzle_diameter']))  # noqa: E501
        if 'extruder_offsets' in params:
            form_params.append(('extruder_offsets', params['extruder_offsets']))  # noqa: E501
            collection_formats['extruder_offsets'] = 'multi'  # noqa: E501
        if 'extruder_shared_nozzle' in params:
            form_params.append(('extruder_shared_nozzle', params['extruder_shared_nozzle']))  # noqa: E501
        if 'heated_bed' in params:
            form_params.append(('heated_bed', params['heated_bed']))  # noqa: E501
        if 'heated_chamber' in params:
            form_params.append(('heated_chamber', params['heated_chamber']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'volume_custom_box' in params:
            form_params.append(('volume_custom_box', params['volume_custom_box']))  # noqa: E501
        if 'volume_depth' in params:
            form_params.append(('volume_depth', params['volume_depth']))  # noqa: E501
        if 'volume_formfactor' in params:
            form_params.append(('volume_formfactor', params['volume_formfactor']))  # noqa: E501
        if 'volume_height' in params:
            form_params.append(('volume_height', params['volume_height']))  # noqa: E501
        if 'volume_origin' in params:
            form_params.append(('volume_origin', params['volume_origin']))  # noqa: E501
        if 'volume_width' in params:
            form_params.append(('volume_width', params['volume_width']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cookieAuth', 'tokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/printer_profiles/update_or_create/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrinterProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
